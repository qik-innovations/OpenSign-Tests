# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that the unfinished SignYourSelf document can be edited from the Dashboard draft document.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:244:1

# Error details

```
Error: page.waitForEvent: Test timeout of 120000ms exceeded.
=========================== logs ===========================
waiting for event "filechooser"
============================================================
    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:348:34
```

# Page snapshot

```yaml
- banner:
  - button ""
  - img "logo"
  - text: TEAM
  - button ""
  - img "img"
  - button "Pravin Testing account"
  - button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages
- button "+ Add pages"
- text: +      
- button [disabled]
- text: 1 of 1
- button [disabled]
- button "Back"
- button "Finish"
- img "signature"
- text:   stamp Fields  signature   stamp   initials   name   job title   company   date   text   cells   checkbox   image   email 
- dialog:
  - button "✕"
  - text: Upload stamp  Upload
  - button "Clear"
  - button "Save" [disabled]
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.26.0 )"
```

# Test source

```ts
  248 |   await commonSteps.login();
  249 | await page.getByRole('menuitem', { name: 'Sign yourself' }).click();
  250 |   const fileChooserPromise = page.waitForEvent('filechooser');
  251 | await page.locator('input[type="file"]').click();
  252 | const fileChooser = await fileChooserPromise;
  253 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  254 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  255 | await page.locator('input[name="Name"]').fill('Draft doc rpt Sample offer letter');
  256 | await page.locator('input[name="Note"]').fill('Note Draft doc rpt');
  257 | await page.getByRole('button', { name: 'Next' }).click();
  258 | await page.waitForLoadState("networkidle");
  259 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  260 | await page.waitForLoadState("networkidle");
  261 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  262 | await page.waitForLoadState("networkidle");
  263 | await page.locator('//span[normalize-space()="signature"]').hover();
  264 | await page.mouse.down();
  265 | await page.mouse.move(600, 300)
  266 | await page.mouse.up();
  267 | try {
  268 | const rowLocator = page.locator("//button[@type='button' and text()='Save']/parent::div");
  269 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  270 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  271 |         await rowLocator.click();
  272 |         console.log("Save button clicked!");
  273 |         break; // Exit the loop if successfully clicked
  274 |     } else {
  275 |         console.log(`Attempt ${i + 1}: Save button not visible, performing actions...`);
  276 |         await page.locator('//span[normalize-space()="signature"]').hover();
  277 |         await page.mouse.down();
  278 |         await page.mouse.move(800, 300);
  279 |         await page.mouse.up();
  280 |         // Wait a bit before checking again
  281 |         await page.waitForTimeout(1000);
  282 |     }
  283 |     if (i === 5) {
  284 |         console.log("Save button did not become visible after multiple attempts.");
  285 |     }
  286 | }
  287 | } catch (error) {
  288 | console.log("Element not found or not interactable, continuing execution.");
  289 |
  290 | }
  291 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
  292 | // Wait up to 90 seconds for the text to appear
  293 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  294 | // Now assert the text
  295 | await expect(page.locator('//div[@data-tut="tourreport3"]//div[text()="Drafts"]')).toBeVisible({ timeout: 12000 });
  296 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[1]')).toContainText('Title');
  297 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[2]')).toContainText('Note');
  298 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[3]')).toContainText('Folder');
  299 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[4]')).toContainText('File');
  300 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[5]')).toContainText('Owner');
  301 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[6]')).toContainText('Signers');
  302 | await expect(page.locator('//div[@data-tut="tourreport3"]//div[@class="font-semibold break-words"]').first()).toContainText('Draft doc rpt Sample offer letter');
  303 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[2]').first()).toContainText('Note Draft doc rpt');
  304 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[3]').first()).toContainText('OpenSign™ Drive'); 
  305 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[4]').first()).toContainText('Download');
  306 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[5]').first()).toContainText('Pravin Testing account');  
  307 | await page.locator('//div[@data-tut="tourreport3"]//div[@role="button"and @title="Edit"]').first().click();
  308 | await page.waitForSelector('#container > .react-pdf__Document', { timeout: 90000 }); 
  309 | await page.waitForLoadState("networkidle");
  310 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  311 | await page.waitForLoadState("networkidle");
  312 | await page.locator('//span[normalize-space()="signature"]').hover();
  313 | await page.mouse.down();
  314 | await page.mouse.move(600, 300)
  315 | await page.mouse.up();
  316 | try {
  317 | const rowLocator = page.locator("//button[@type='button' and text()='Save']/parent::div");
  318 |
  319 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  320 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  321 |         await rowLocator.click();
  322 |         console.log("Save button clicked!");
  323 |         break; // Exit the loop if successfully clicked
  324 |     } else {
  325 |         console.log(`Attempt ${i + 1}: Save button not visible, performing actions...`);
  326 |
  327 |         await page.locator('//span[normalize-space()="signature"]').hover();
  328 |         await page.mouse.down();
  329 |         await page.mouse.move(800, 300);
  330 |         await page.mouse.up();
  331 |         
  332 |         // Wait a bit before checking again
  333 |         await page.waitForTimeout(1000);
  334 |     }
  335 |
  336 |     if (i === 5) {
  337 |         console.log("Save button did not become visible after multiple attempts.");
  338 |     }
  339 | }
  340 | } catch (error) {
  341 | console.log("Element not found or not interactable, continuing execution.");
  342 |
  343 | }
  344 | await page.locator('//span[normalize-space()="stamp"]').hover();
  345 | await page.mouse.down();
  346 | await page.mouse.move(600, 360)
  347 | await page.mouse.up();
> 348 | const fileChooserPromise1 = page.waitForEvent('filechooser');
      |                                  ^ Error: page.waitForEvent: Test timeout of 120000ms exceeded.
  349 | await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  350 | const fileChooser1 = await fileChooserPromise1;
  351 | await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  352 | await page.locator("//button[normalize-space()='Save']").click();
  353 | await page.locator('//span[normalize-space()="initials"]').hover();
  354 | await page.mouse.down();
  355 | await page.mouse.move(600, 420)
  356 | await page.mouse.up();
  357 | await page.locator("//button[normalize-space()='Save']").click();
  358 | await page.locator('//span[normalize-space()="date"]').hover();
  359 | await page.mouse.down();
  360 | await page.mouse.move(600, 550)
  361 | await page.mouse.up();
  362 | await page.locator("//button[normalize-space()='Finish']").click();
  363 | await page.getByText('Successfully signed!').waitFor({ timeout: 90000 });
  364 |  await page.locator("//input[@placeholder='Add an email address and hit enter']").fill('pravin@Nxglabs.in');
  365 |
  366 |  await page.locator("//button[normalize-space()='Send']").click();
  367 | });
  368 | test('Verify that pagination is functioning correctly in the dashboard drafts document.', async ({ page }) => {
  369 |     const commonSteps = new CommonSteps(page);
  370 |     // Step 1: Navigate to Base URL and log in
  371 |     await commonSteps.navigateToBaseUrl();
  372 |     await commonSteps.login();
  373 |     // Wait up to 90 seconds for the text to appear
  374 |     await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  375 |     // Now assert the text
  376 |     //await expect(page.locator('#renderList')).toContainText('Drafts');
  377 |     //Check if Pagination Buttons Exist
  378 |     const isPaginationVisible = await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').isVisible();
  379 |     //expect(isPaginationVisible).toBeTruthy();
  380 |     const isPaginationVisiblePrev = await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').isVisible();
  381 |     //expect(isPaginationVisiblePrev).toBeTruthy();
  382 |     const page1Data = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  383 |     await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').click();
  384 |     await page.waitForLoadState('domcontentloaded');
  385 |     //const firstPageContent = await page.locator('//button[@class=\'op-btn-active op-join-item op-btn op-btn-sm\' and text()=\'2\']').first().textContent(); // Capture first item
  386 |   const page2Data = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  387 |   expect(page2Data).not.toEqual(page1Data);// Ensure content changes
  388 |   //Verify 'Previous' and 'Next' Buttons Work
  389 |   await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').click();
  390 |   await page.waitForLoadState('domcontentloaded');
  391 |   const page1DataPrev = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  392 |   expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  393 |   
  394 |   });
  395 |
  396 | test('Verify that owner can create the document and sign it from the dashboard recent signature requests.', async ({ page }) => {
  397 |   const commonSteps = new CommonSteps(page);
  398 |   // Step 1: Navigate to Base URL and log in
  399 |   await commonSteps.navigateToBaseUrl();
  400 |   await commonSteps.login();
  401 | //const title = await page.title()
  402 |   //Expects page to have a heading with the name of dashboard.
  403 | //expect(title).toBe('Dashboard - OpenSign™');
  404 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  405 |   await page.locator('input[name="Name"]').click();
  406 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  407 |   const fileChooserPromise = page.waitForEvent('filechooser');
  408 | await page.locator('input[type="file"]').click();
  409 | const fileChooser = await fileChooserPromise;
  410 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  411 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  412 | await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
  413 | await page.locator('input[name="Name"]').click();
  414 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  415 | await page.getByRole('button', { name: 'Next' }).click();
  416 | await page.waitForLoadState("networkidle");
  417 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  418 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  419 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  420 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  421 | await page.mouse.down();
  422 | await page.mouse.move(600, 300)
  423 | await page.mouse.up();
  424 | try {
  425 | const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  426 |
  427 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  428 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  429 |     
  430 |         console.log("signature widget dragged and dropped");
  431 |         break; // Exit the loop if successfully clicked
  432 |     } else {
  433 |         console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  434 |
  435 |         await page.locator('//span[normalize-space()="signature"]').hover();
  436 |         await page.mouse.down();
  437 |         await page.mouse.move(800, 300);
  438 |         await page.mouse.up();
  439 |         
  440 |         // Wait a bit before checking again
  441 |         await page.waitForTimeout(1000);
  442 |     }
  443 |
  444 |     if (i === 5) {
  445 |         console.log("signature widget did not become visible on the document after multiple attempts.");
  446 |     }
  447 | }
  448 | } catch (error) {
```