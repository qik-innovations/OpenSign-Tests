# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that owner can create the document and sign it from the dashboard recent signature requests.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:396:1

# Error details

```
Error: locator.click: Test timeout of 120000ms exceeded.
Call log:
  - waiting for locator('//input[@type="checkbox" and @data-tut="IsAgree"]')

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:486:73
```

# Page snapshot

```yaml
- banner:
  - button ""
  - img "logo"
  - text: TEAM
  - button ""
  - img "img"
  - button "Pravin Testing account"
  - button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- checkbox
- text: I confirm that I have read and understood the Electronic Record and Signature Disclosure and consent to use electronic records and signatures.
- button "Agree & Continue"
- text: "Note: Agreeing to this does not mean you are signing the document immediately. This only allows you to review the document electronically. You will have the opportunity to read it in full and decide whether to sign it afterward. Pages   "
- button [disabled]
- text: 1 of 1
- button [disabled]
- button "Decline"
- button "Download"
- button "Finish"
- text: signature stamp initials
- textbox "name": Pravin Testing account
- text: Yet to sign P Pravin Testing account pravin+testaccount@nxglabs.in
- paragraph: Signature
- tablist:
  - tab "My signature"
  - tab "My initials"
- img "signature"
- button "Auto sign all"
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.26.0 )"
```

# Test source

```ts
  386 |   const page2Data = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  387 |   expect(page2Data).not.toEqual(page1Data);// Ensure content changes
  388 |   //Verify 'Previous' and 'Next' Buttons Work
  389 |   await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').click();
  390 |   await page.waitForLoadState('domcontentloaded');
  391 |   const page1DataPrev = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  392 |   expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  393 |   
  394 |   });
  395 |
  396 | test('Verify that owner can create the document and sign it from the dashboard recent signature requests.', async ({ page }) => {
  397 |   const commonSteps = new CommonSteps(page);
  398 |   // Step 1: Navigate to Base URL and log in
  399 |   await commonSteps.navigateToBaseUrl();
  400 |   await commonSteps.login();
  401 | //const title = await page.title()
  402 |   //Expects page to have a heading with the name of dashboard.
  403 | //expect(title).toBe('Dashboard - OpenSign™');
  404 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  405 |   await page.locator('input[name="Name"]').click();
  406 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  407 |   const fileChooserPromise = page.waitForEvent('filechooser');
  408 | await page.locator('input[type="file"]').click();
  409 | const fileChooser = await fileChooserPromise;
  410 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  411 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  412 | await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
  413 | await page.locator('input[name="Name"]').click();
  414 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  415 | await page.getByRole('button', { name: 'Next' }).click();
  416 | await page.waitForLoadState("networkidle");
  417 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  418 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  419 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  420 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  421 | await page.mouse.down();
  422 | await page.mouse.move(600, 300)
  423 | await page.mouse.up();
  424 | try {
  425 | const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  426 |
  427 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  428 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  429 |     
  430 |         console.log("signature widget dragged and dropped");
  431 |         break; // Exit the loop if successfully clicked
  432 |     } else {
  433 |         console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  434 |
  435 |         await page.locator('//span[normalize-space()="signature"]').hover();
  436 |         await page.mouse.down();
  437 |         await page.mouse.move(800, 300);
  438 |         await page.mouse.up();
  439 |         
  440 |         // Wait a bit before checking again
  441 |         await page.waitForTimeout(1000);
  442 |     }
  443 |
  444 |     if (i === 5) {
  445 |         console.log("signature widget did not become visible on the document after multiple attempts.");
  446 |     }
  447 | }
  448 | } catch (error) {
  449 | console.log("Element not found or not interactable, continuing execution.");
  450 |
  451 | }
  452 | await page.locator('//span[normalize-space()=\'stamp\']').hover();
  453 | await page.mouse.down();
  454 | await page.mouse.move(600, 360)
  455 | await page.mouse.up();
  456 | await page.locator('//span[normalize-space()=\'initials\']').hover();
  457 | await page.mouse.down();
  458 | await page.mouse.move(600, 420)
  459 | await page.mouse.up();
  460 | await page.locator('//span[normalize-space()=\'name\']').hover();
  461 | await page.mouse.down();
  462 | await page.mouse.move(600, 470)
  463 | await page.mouse.up();
  464 | await page.getByRole('button', { name: 'Next' }).click();
  465 | //await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
  466 | await page.getByRole('button', { name: 'Send' }).click();
  467 | await expect(page.locator('//h3[text()=\'Mails Sent\']')).toContainText('Mails Sent');
  468 | await expect(page.locator('#selectSignerModal canvas')).toBeVisible();
  469 | await expect(page.locator('#selectSignerModal')).toContainText('Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoHow was your experience with OpenSign™?😡0-3😐4-6😊7-8😍9-10Submit');
  470 | await page.getByRole('button', { name: 'No' }).click();
  471 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
  472 | // Wait up to 90 seconds for the text to appear
  473 |
  474 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  475 | // Now assert the text
  476 | await expect(page.locator('//div[@data-tut="tourreport1"]//div[text()="Recent signature requests"]')).toBeVisible({ timeout: 12000 });
  477 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[1]')).toContainText('Title');
  478 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[2]')).toContainText('File');
  479 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[3]')).toContainText('Owner');
  480 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[4]')).toContainText('Signers');
  481 | await expect(page.locator('//div[@data-tut="tourreport1"]//div[@class="font-semibold break-words"]').first()).toContainText('Sample-joining-letter');
  482 | await expect(page.locator('//div[@data-tut="tourreport1"]//td[2]').first()).toContainText('Download');
  483 | await expect(page.locator('//div[@data-tut="tourreport1"]//td[3]').first()).toContainText('Pravin Testing account');  
  484 | await page.locator('//div[@data-tut="tourreport1"]//div[@role="button"and @title="SIGN"]').first().click();
  485 | // Now assert the text
> 486 | await page.locator('//input[@type="checkbox" and @data-tut="IsAgree"]').click();
      |                                                                         ^ Error: locator.click: Test timeout of 120000ms exceeded.
  487 | await page.getByRole('button', { name: 'Agree & Continue' }).click();
  488 | await page.waitForLoadState("networkidle");
  489 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  490 | await page.locator('//div[contains(text(),"signature")]').click();
  491 | await page.mouse.down();
  492 | await page.mouse.move(120, 122)
  493 | await page.mouse.up();
  494 | // Optionally save changes
  495 | await page.locator("//button[normalize-space()='Save']").click();
  496 | //div[contains(text(),'signature')]
  497 | await page.locator('//div[contains(text(),"stamp")]').click();
  498 | const fileChooserPromise1 = page.waitForEvent('filechooser');
  499 | await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  500 | const fileChooser1 = await fileChooserPromise1;
  501 | await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  502 | await page.locator("//button[normalize-space()='Save']").click();
  503 | await page.locator('//div[contains(text(),"initials")]').click();
  504 | await page.mouse.move(650, 350)
  505 | await page.mouse.down();
  506 | await page.mouse.move(700, 380)
  507 | await page.mouse.up();
  508 | await page.locator("//button[normalize-space()='Save']").click();
  509 | await page.getByRole('button', { name: 'Finish' }).click();
  510 | await expect(page.locator('#selectSignerModal')).toContainText('Congratulations! 🎉 This document has been successfully signed by all participants!',{ timeout: 90000 });
  511 | await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Print' })).toBeVisible();
  512 | await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Certificate' })).toBeVisible();
  513 | await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Download' })).toBeVisible();
  514 | await page.getByRole('button', { name: '✕' }).click();
  515 | });
  516 | test('Verify that pagination is functioning correctly in the dashboard recent signature requests.', async ({ page }) => {
  517 |   const commonSteps = new CommonSteps(page);
  518 |   // Step 1: Navigate to Base URL and log in
  519 |   await commonSteps.navigateToBaseUrl();
  520 |   await commonSteps.login();
  521 |   // Wait up to 90 seconds for the text to appear
  522 |   await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  523 |   // Now assert the text
  524 |   await expect(page.locator('//div[@data-tut="tourreport1"]//div[@class="font-light" and text()="Recent signature requests"]')).toContainText('Recent signature requests');
  525 |   //Check if Pagination Buttons Exist
  526 |   const isPaginationVisible = await page.locator('//div[@data-tut="tourreport1"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').isVisible();
  527 |   //expect(isPaginationVisible).toBeTruthy();
  528 |   const isPaginationVisiblePrev = await page.locator('//div[@data-tut="tourreport1"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').isVisible();
  529 |   //expect(isPaginationVisiblePrev).toBeTruthy();
  530 |   const page1Data = await page.locator('//div[@data-tut="tourreport1"]//table[1]//tbody//tr').allTextContents();
  531 |   await page.locator('//div[@data-tut="tourreport1"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').click();
  532 |   await page.waitForLoadState('domcontentloaded');
  533 |   //const firstPageContent = await page.locator('//button[@class=\'op-btn-active op-join-item op-btn op-btn-sm\' and text()=\'2\']').first().textContent(); // Capture first item
  534 | const page2Data = await page.locator('//div[@data-tut="tourreport1"]//table[1]//tbody//tr').allTextContents();
  535 | expect(page2Data).not.toEqual(page1Data);// Ensure content changes
  536 | //Verify 'Previous' and 'Next' Buttons Work
  537 | await page.locator('//div[@data-tut="tourreport1"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').click();
  538 | await page.waitForLoadState('domcontentloaded');
  539 | const page1DataPrev = await page.locator('//div[@data-tut="tourreport1"]//table[1]//tbody//tr').allTextContents();
  540 | expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  541 | });
  542 |
  543 | test('Verify that the document sent for a signature request appears in the Recently Sent for Signatures section on the dashboard.', async ({ page }) => {
  544 |   const commonSteps = new CommonSteps(page);
  545 |   // Step 1: Navigate to Base URL and log in
  546 |   await commonSteps.navigateToBaseUrl();
  547 |   await commonSteps.login();
  548 | //const title = await page.title()
  549 |   //Expects page to have a heading with the name of dashboard.
  550 | //expect(title).toBe('Dashboard - OpenSign™');
  551 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  552 |   await page.locator('input[name="Name"]').click();
  553 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  554 |   const fileChooserPromise = page.waitForEvent('filechooser');
  555 | await page.locator('input[type="file"]').click();
  556 | const fileChooser = await fileChooserPromise;
  557 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  558 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  559 | await page.getByRole('option', { name: 'Andy amaya<andyamaya@nxglabs.' }).waitFor({ timeout: 90000 });
  560 | await page.getByRole('option', { name: 'Andy amaya<andyamaya@nxglabs.' }).click();
  561 | await page.locator('input[name="Name"]').click();
  562 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  563 | await page.getByRole('button', { name: 'Next' }).click();
  564 | await page.waitForLoadState("networkidle");
  565 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  566 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  567 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  568 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  569 | await page.mouse.down();
  570 | await page.mouse.move(600, 300)
  571 | await page.mouse.up();
  572 | try {
  573 | const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  574 |
  575 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  576 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  577 |     
  578 |         console.log("signature widget dragged and dropped");
  579 |         break; // Exit the loop if successfully clicked
  580 |     } else {
  581 |         console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  582 |
  583 |         await page.locator('//span[normalize-space()="signature"]').hover();
  584 |         await page.mouse.down();
  585 |         await page.mouse.move(800, 300);
  586 |         await page.mouse.up();
```