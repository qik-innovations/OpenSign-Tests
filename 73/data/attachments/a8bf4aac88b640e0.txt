# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that the unfinished SignYourSelf document can be edited from the Draft Document Report and completed by adding the required widgets.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/ReportDraftdoc.spec.js:89:1

# Error details

```
Error: page.waitForEvent: Test timeout of 120000ms exceeded.
=========================== logs ===========================
waiting for event "filechooser"
============================================================
    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/ReportDraftdoc.spec.js:194:35
```

# Page snapshot

```yaml
- banner:
  - button ""
  - img "logo"
  - text: TEAM
  - button ""
  - img "img"
  - button "Pravin Testing account"
  - button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menu "Documents submenu":
        - menuitem "Need your sign"
        - menuitem "In progress"
        - menuitem "Completed"
        - menuitem "Drafts"
        - menuitem "Declined"
        - menuitem "Expired"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages
- button "+ Add pages"
- text: +      
- button [disabled]
- text: 1 of 1
- button [disabled]
- button "Back"
- button "Finish"
- img "signature"
- text:   stamp Fields  signature   stamp   initials   name   job title   company   date   text   cells   checkbox   image   email 
- dialog:
  - button "✕"
  - text: Upload stamp  Upload
  - button "Clear"
  - button "Save" [disabled]
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.26.0 )"
```

# Test source

```ts
   94 |   await page.getByRole('menuitem', { name: 'Sign yourself' }).click();
   95 |     const fileChooserPromise = page.waitForEvent('filechooser');
   96 |   await page.locator('input[type="file"]').click();
   97 |   const fileChooser = await fileChooserPromise;
   98 |   await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
   99 |   await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  100 |   await page.locator('input[name="Name"]').fill('Draft doc rpt Sample offer letter');
  101 |   await page.locator('input[name="Note"]').fill('Note Draft doc rpt');
  102 |   await page.getByRole('button', { name: 'Next' }).click();
  103 |   await page.waitForLoadState("networkidle");
  104 |   await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  105 |   await page.waitForLoadState("networkidle");
  106 |   await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  107 |   await page.waitForLoadState("networkidle");
  108 | await page.locator('//span[normalize-space()="signature"]').hover();
  109 | await page.mouse.down();
  110 | await page.mouse.move(600, 300)
  111 | await page.mouse.up();
  112 | try {
  113 |   const rowLocator = page.locator("//button[@type='button' and text()='Save']/parent::div");
  114 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  115 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  116 |           await rowLocator.click();
  117 |           console.log("Save button clicked!");
  118 |           break; // Exit the loop if successfully clicked
  119 |       } else {
  120 |           console.log(`Attempt ${i + 1}: Save button not visible, performing actions...`);
  121 |           await page.locator('//span[normalize-space()="signature"]').hover();
  122 |           await page.mouse.down();
  123 |           await page.mouse.move(800, 300);
  124 |           await page.mouse.up();
  125 |           // Wait a bit before checking again
  126 |           await page.waitForTimeout(1000);
  127 |       }
  128 |       if (i === 5) {
  129 |           console.log("Save button did not become visible after multiple attempts.");
  130 |       }
  131 |   }
  132 | } catch (error) {
  133 |   console.log("Element not found or not interactable, continuing execution.");
  134 |  
  135 | }
  136 | await page.getByRole('button', { name: ' Documents' }).click();
  137 | await page.getByRole('menuitem', { name: 'Drafts' }).click();
  138 | // Wait up to 90 seconds for the text to appear
  139 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  140 | // Now assert the text
  141 | await expect(page.locator('#renderList')).toContainText('Draft documents');
  142 | await expect(page.locator('thead')).toContainText('Title');
  143 |   await expect(page.locator('thead')).toContainText('Note');
  144 |   await expect(page.locator('thead')).toContainText('Folder');
  145 |   await expect(page.locator('thead')).toContainText('File');
  146 |   await expect(page.locator('thead')).toContainText('Owner');
  147 |   await expect(page.locator('thead')).toContainText('Signers');
  148 | await expect(page.locator('.p-2 > .font-semibold').first()).toContainText('Draft doc rpt Sample offer letter');
  149 |  await expect(page.locator('td:nth-child(2)').first()).toContainText('Note Draft doc rpt');
  150 |  await expect(page.locator('td:nth-child(3)').first()).toContainText('OpenSign™ Drive'); 
  151 |  await expect(page.locator('td:nth-child(4)').first()).toContainText('Download');
  152 |  await expect(page.locator('td:nth-child(5)').first()).toContainText('Pravin Testing account');  
  153 |  await page.locator('//div[@role="button"and @title="Edit"]').first().click();
  154 |   await page.waitForSelector('#container > .react-pdf__Document', { timeout: 90000 }); 
  155 |   await page.waitForLoadState("networkidle");
  156 |   await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  157 |   await page.waitForLoadState("networkidle");
  158 | await page.locator('//span[normalize-space()="signature"]').hover();
  159 | await page.mouse.down();
  160 | await page.mouse.move(600, 300)
  161 | await page.mouse.up();
  162 | try {
  163 |   const rowLocator = page.locator("//button[@type='button' and text()='Save']/parent::div");
  164 |
  165 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  166 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  167 |           await rowLocator.click();
  168 |           console.log("Save button clicked!");
  169 |           break; // Exit the loop if successfully clicked
  170 |       } else {
  171 |           console.log(`Attempt ${i + 1}: Save button not visible, performing actions...`);
  172 |   
  173 |           await page.locator('//span[normalize-space()="signature"]').hover();
  174 |           await page.mouse.down();
  175 |           await page.mouse.move(800, 300);
  176 |           await page.mouse.up();
  177 |           
  178 |           // Wait a bit before checking again
  179 |           await page.waitForTimeout(1000);
  180 |       }
  181 |   
  182 |       if (i === 5) {
  183 |           console.log("Save button did not become visible after multiple attempts.");
  184 |       }
  185 |   }
  186 | } catch (error) {
  187 |   console.log("Element not found or not interactable, continuing execution.");
  188 |  
  189 | }
  190 |  await page.locator('//span[normalize-space()="stamp"]').hover();
  191 |  await page.mouse.down();
  192 |  await page.mouse.move(600, 360)
  193 |  await page.mouse.up();
> 194 |  const fileChooserPromise1 = page.waitForEvent('filechooser');
      |                                   ^ Error: page.waitForEvent: Test timeout of 120000ms exceeded.
  195 |  await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  196 |  const fileChooser1 = await fileChooserPromise1;
  197 |  await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  198 |  await page.locator("//button[normalize-space()='Save']").click();
  199 |  await page.locator('//span[normalize-space()="initials"]').hover();
  200 |  await page.mouse.down();
  201 |  await page.mouse.move(600, 420)
  202 |  await page.mouse.up();
  203 |  await page.locator("//button[normalize-space()='Save']").click();
  204 |  await page.locator('//span[normalize-space()="date"]').hover();
  205 |  await page.mouse.down();
  206 |  await page.mouse.move(600, 550)
  207 |  await page.mouse.up();
  208 |  await page.locator("//button[normalize-space()='Finish']").click();
  209 |  await page.getByText('Successfully signed!').waitFor({ timeout: 90000 });
  210 |    await page.locator("//input[@placeholder='Add an email address and hit enter']").fill('pravin@Nxglabs.in');
  211 |
  212 |    await page.locator("//button[normalize-space()='Send']").click();
  213 | });
  214 |
  215 | test('Verify that pagination is functioning correctly in the drafts document.', async ({ page }) => {
  216 |     const commonSteps = new CommonSteps(page);
  217 |     // Step 1: Navigate to Base URL and log in
  218 |     await commonSteps.navigateToBaseUrl();
  219 |     await commonSteps.login();
  220 |     await page.getByRole('button', { name: ' Documents' }).click();
  221 |     await page.getByRole('menuitem', { name: 'Drafts' }).click();
  222 |     // Wait up to 90 seconds for the text to appear
  223 |     await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  224 |     // Now assert the text
  225 |     await expect(page.locator('#renderList')).toContainText('Draft documents');
  226 |     const title = await page.title();
  227 |     if (title === 'Draft Documents - OpenSign™') {
  228 |       console.log('Draft Documents - OpenSign™');
  229 |     } else {
  230 |       console.error(`Page title is incorrect. Expected: "Draft Documents - OpenSign™", Got: "${title}"`);
  231 |     }
  232 |    
  233 |     //Check if Pagination Buttons Exist
  234 |     const isPaginationVisible = await page.getByRole('button', { name: 'Next' }).isVisible();
  235 |     //expect(isPaginationVisible).toBeTruthy();
  236 |     const isPaginationVisiblePrev = await page.getByRole('button', { name: 'Prev' }).isVisible();
  237 |     //expect(isPaginationVisiblePrev).toBeTruthy();
  238 |     const page1Data = await page.locator('table tbody tr').allTextContents();
  239 |     await page.getByRole('button', { name: 'Next' }).click();
  240 |     await page.waitForLoadState('domcontentloaded');
  241 |     //const firstPageContent = await page.locator('//button[@class=\'op-btn-active op-join-item op-btn op-btn-sm\' and text()=\'2\']').first().textContent(); // Capture first item
  242 |   const page2Data = await page.locator('table tbody tr').allTextContents();
  243 |   expect(page2Data).not.toEqual(page1Data);// Ensure content changes
  244 |   //Verify 'Previous' and 'Next' Buttons Work
  245 |   await page.getByRole('button', { name: 'Prev' }).click();
  246 |   await page.waitForLoadState('domcontentloaded');
  247 |   const page1DataPrev = await page.locator('table tbody tr').allTextContents();
  248 |   expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  249 |   
  250 |   });
  251 |   
```