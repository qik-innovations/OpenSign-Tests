# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Request signature >> Verify that textinput field widget Copy widget next to current function correctly in request signature.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Request_Signature.spec.js:3832:1

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: locator('//div[@class="signYourselfBlock react-draggable react-draggable-dragged"]//div[@class="select-none-cls"]//span[text()="text input"]')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('//div[@class="signYourselfBlock react-draggable react-draggable-dragged"]//div[@class="select-none-cls"]//span[text()="text input"]')

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Request_Signature.spec.js:3904:164
```

# Page snapshot

```yaml
- banner:
  - text: "New feature: Protect your account with Two-Factor Authentication (2FA) and enjoy the future of login with Passkeys — no passwords needed. — Setup now."
  - img
  - text: 
  - button ""
  - img "logo"
  - text: TEAM
  - button ""
  - img "img"
  - button "Pravin Testing account"
  - button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages
- button "+ Add pages"
- text: +      
- button [disabled]
- text: 1 of 3
- button
- button "Back"
- button "Next"
- text: signature     text input text input Recipients  Andy amaya andyamaya@nxglabs.in 
- separator
- button "+ Add recipients"
- text: Fields  signature   stamp   initials   name   job title   company   date   text   text input   cells   checkbox   dropdown   radio button   image   email 
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.26.0 )"
```

# Test source

```ts
  3804 |   await page.locator('//i[@class="fa-light fa-copy icon"]').dblclick();
  3805 |   const isVisible = await page.locator('//h3[text()="Copy widget to"]').isVisible();
  3806 |   if (isVisible) {
  3807 |       console.log('"Copy widget to" is visible. Stopping the loop.');
  3808 |       break; // Exit loop once the element is visible
  3809 |   }
  3810 |   await page.waitForTimeout(500); // Small delay to prevent rapid clicking
  3811 | }
  3812 | await page.getByText('All pages but first').click();
  3813 | await page.getByRole('button', { name: 'Apply' }).click();
  3814 |   await expect(page.locator('//div[@class="signYourselfBlock react-draggable"]//span[text()="text input"]')).toBeVisible();
  3815 |   await page.locator('canvas').nth(1).click({
  3816 |     position: {
  3817 |       x: 49,
  3818 |       y: 71
  3819 |     }
  3820 |   });
  3821 |   await expect(page.locator('//div[@class="signYourselfBlock react-draggable"]//div[@class="select-none-cls"]//span[text()="text input"]')).toBeVisible();
  3822 |   await page.locator('canvas').nth(0).click({
  3823 |     position: {
  3824 |       x: 65,
  3825 |       y: 59
  3826 |     }
  3827 |   });
  3828 |   await expect(page.locator('//div[@class="signYourselfBlock react-draggable"]//div[@class="select-none-cls"]//span[text()="text input"]')).not.toBeVisible();
  3829 |   await page.getByRole('button', { name: 'Next' }).click();
  3830 |   await expect(page.locator("//dialog[@id='selectSignerModal']//h3[text()='Send Mail']")).toBeVisible({ timeout: 120000 });
  3831 | });
  3832 | test('Verify that textinput field widget Copy widget next to current function correctly in request signature.', async ({ page }) => {
  3833 |   const commonSteps = new CommonSteps(page);
  3834 |   // Step 1: Navigate to Base URL and log in
  3835 |   await commonSteps.navigateToBaseUrl();
  3836 |   await commonSteps.login();
  3837 | //const title = await page.title()
  3838 |   //Expects page to have a heading with the name of dashboard.
  3839 | //expect(title).toBe('Dashboard - OpenSign™');
  3840 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  3841 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  3842 |   const fileChooserPromise = page.waitForEvent('filechooser');
  3843 | await page.locator('input[type="file"]').click();
  3844 | const fileChooser = await fileChooserPromise;
  3845 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample_Test_doc_line.pdf'));
  3846 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  3847 | await page.getByRole('option', { name: 'Andy amaya<andyamaya@nxglabs.' }).waitFor({ timeout: 90000 });
  3848 | await page.getByRole('option', { name: 'Andy amaya<andyamaya@nxglabs.' }).click();
  3849 | await page.locator('input[name="Name"]').click();
  3850 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  3851 | await page.getByRole('button', { name: 'Next' }).click();
  3852 | await page.waitForLoadState("networkidle");
  3853 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  3854 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  3855 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  3856 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  3857 | await page.mouse.down();
  3858 | await page.mouse.move(600, 300)
  3859 | await page.mouse.up();
  3860 | try {
  3861 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  3862 |
  3863 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  3864 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  3865 |       
  3866 |           console.log("signature widget dragged and dropped");
  3867 |           break; // Exit the loop if successfully clicked
  3868 |       } else {
  3869 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  3870 |           await page.locator('//span[normalize-space()="signature"]').hover();
  3871 |           await page.mouse.down();
  3872 |           await page.mouse.move(800, 300);
  3873 |           await page.mouse.up();
  3874 |           
  3875 |           // Wait a bit before checking again
  3876 |           await page.waitForTimeout(1000);
  3877 |       }
  3878 |   
  3879 |       if (i === 5) {
  3880 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  3881 |       }
  3882 |   }
  3883 | } catch (error) {
  3884 |   console.log("Element not found or not interactable, continuing execution.");
  3885 |  
  3886 | }
  3887 |   await page.locator('//span[normalize-space()="text input"]').hover();
  3888 | await page.mouse.down();
  3889 | await page.mouse.move(800, 370);
  3890 | await page.mouse.up();
  3891 |
  3892 | while (true) {
  3893 |   await page.locator('//i[@class="fa-light fa-copy icon"]').dblclick();
  3894 |   const isVisible = await page.locator('//h3[text()="Copy widget to"]').isVisible();
  3895 |   if (isVisible) {
  3896 |       console.log('"Copy widget to" is visible. Stopping the loop.');
  3897 |       break; // Exit loop once the element is visible
  3898 |   }
  3899 |   await page.waitForTimeout(500); // Small delay to prevent rapid clicking
  3900 | }
  3901 | await page.getByText('Next to current widget').click();
  3902 | await page.getByRole('button', { name: 'Apply' }).click();
  3903 | //verify the firts dropped text input widget
> 3904 | await expect (page.locator('//div[@class="signYourselfBlock react-draggable react-draggable-dragged"]//div[@class="select-none-cls"]//span[text()="text input"]')).toBeVisible();
       |                                                                                                                                                                    ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  3905 | //verify the copied text input widget
  3906 | await expect (page.locator('//div[@class="signYourselfBlock react-draggable"]//div[@class="select-none-cls"]//span[text()="text input"]')).toBeVisible();
  3907 |   await page.getByRole('button', { name: 'Next' }).click();
  3908 |   await expect(page.locator("//dialog[@id='selectSignerModal']//h3[text()='Send Mail']")).toBeVisible({ timeout: 120000 });
  3909 | });
  3910 | test('Verify that the document is not uploaded if its format is not supported in request signature.', async ({ page }) => {
  3911 |   const commonSteps = new CommonSteps(page);
  3912 |   // Step 1: Navigate to Base URL and log in
  3913 |   await commonSteps.navigateToBaseUrl();
  3914 |   await commonSteps.login();
  3915 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  3916 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  3917 |   await page.locator('input[name="Note"]').click();
  3918 |   //select and try to upload the file format type json
  3919 |   const fileChooserPromise = page.waitForEvent('filechooser');
  3920 | await page.locator('input[type="file"]').click();
  3921 | const fileChooser = await fileChooserPromise;
  3922 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Unsupported_fileFormats/Presentation1.pptx'));
  3923 | page.on('dialog', async (dialog) => {
  3924 |   console.log(`Dialog message: ${dialog.message()}`);
  3925 |   if (dialog.message() === 'We are currently experiencing some issues with processing DOCX files. Please upload the PDF file or contact us on support@opensignlabs.com') {
  3926 |     console.log('Dialog text matches the expected text.');
  3927 |   } else {
  3928 |     console.error('Dialog text does NOT match the expected text.');
  3929 |   }
  3930 |   await dialog.accept();
  3931 | });
  3932 | const fileChooserPromise2 = page.waitForEvent('filechooser');
  3933 | await page.locator('input[type="file"]').click();
  3934 | const fileChooser2 = await fileChooserPromise2;
  3935 | await fileChooser2.setFiles(path.join(__dirname, '../TestData/Unsupported_fileFormats/PlanSheet.xlsx'));
  3936 | page.on('dialog', async (dialog) => {
  3937 |   console.log(`Dialog message: ${dialog.message()}`);
  3938 |   if (dialog.message() === 'We are currently experiencing some issues with processing DOCX files. Please upload the PDF file or contact us on support@opensignlabs.com') {
  3939 |     console.log('Dialog text matches the expected text.');
  3940 |   } else {
  3941 |     console.error('Dialog text does NOT match the expected text.');
  3942 |   }
  3943 |   await dialog.accept();
  3944 | });
  3945 | });
  3946 | });
  3947 |
  3948 |
```