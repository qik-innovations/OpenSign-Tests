# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that the user can revoke the document from the dashboard Recently sent for signatures.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:957:1

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)

Locator: locator('#selectSignerModal')
Expected string: "Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoShare your review"
Received string: "Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoHow was your experience with OpenSign™?😡0-3😐4-6😊7-8😍9-10Submit"
Call log:
  - expect.toContainText with timeout 5000ms
  - waiting for locator('#selectSignerModal')
    9 × locator resolved to <dialog id="selectSignerModal" class="op-modal op-modal-open">…</dialog>
      - unexpected value "Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoHow was your experience with OpenSign™?😡0-3😐4-6😊7-8😍9-10Submit"

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:1019:50
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: TEAM
- button ""
- img "img"
- button "Pravin Testing account"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages
- button "+ Add pages"
- text: +     
- dialog:
  - heading "Mails Sent" [level=3]
  - button "✕"
  - paragraph: Subsequent signers will get email(s) once you signs the document.
  - paragraph: Do you want to sign the document right now?
  - button "Yes"
  - button "No"
  - heading "How was your experience with OpenSign™?" [level=2]
  - img "bad": 😡
  - text: 0-3
  - img "meh": 😐
  - text: 4-6
  - img "good": 😊
  - text: 7-8
  - img "great": 😍
  - text: 9-10
  - button "Submit"
- button [disabled]
- text: 1 of 1
- button [disabled]
- button "Back"
- button "Next" [disabled]
- text: Recipients P Pravin Testing account pravin+testaccount@nxglabs.in 
- separator
- button "+ Add recipients"
- text: Fields  signature   stamp   initials   name   job title   company   date   text   text input   checkbox   dropdown   radio button   image   email 
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.17.0 )"
```

# Test source

```ts
   919 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
   920 |   
   921 |           await page.locator('//span[normalize-space()="signature"]').hover();
   922 |           await page.mouse.down();
   923 |           await page.mouse.move(800, 300);
   924 |           await page.mouse.up();
   925 |           
   926 |           // Wait a bit before checking again
   927 |           await page.waitForTimeout(1000);
   928 |       }
   929 |   
   930 |       if (i === 5) {
   931 |           console.log("signature widget did not become visible on the document after multiple attempts.");
   932 |       }
   933 |   }
   934 | } catch (error) {
   935 |   console.log("Element not found or not interactable, continuing execution.");
   936 |  
   937 | }
   938 | await page.getByRole('button', { name: 'Next' }).click();
   939 | //await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
   940 | await page.getByRole('button', { name: 'Send' }).click();
   941 | await expect(page.locator('//h3[text()=\'Mails Sent\']')).toContainText('Mails Sent');
   942 | await expect(page.locator('#selectSignerModal canvas')).toBeVisible();
   943 | await expect(page.locator('#selectSignerModal')).toContainText('Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoShare your review');
   944 | await page.getByRole('button', { name: 'No' }).click();
   945 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
   946 | // Wait up to 90 seconds for the text to appear
   947 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
   948 | await page.locator('//div[@data-tut="tourreport2"]//i[@class="fa-light fa-ellipsis-vertical fa-lg"]').first().click();
   949 | await page.locator('//span[contains(text(),"Resend")]').click();
   950 | await expect(page.getByRole('heading')).toContainText('Resend mail');
   951 |   await expect(page.locator('#selectSignerModal')).toContainText('Pravin Testing account <pravin+testaccount@nxglabs.in>');
   952 |   await page.getByRole('button', { name: 'Resend' }).click();
   953 |   await page.getByRole('button', { name: 'Resend' }).click();
   954 |   await expect(page.locator('#renderList')).toContainText('Mail sent successfully.');
   955 |
   956 | });
   957 | test('Verify that the user can revoke the document from the dashboard Recently sent for signatures.', async ({ page }) => {
   958 |   const commonSteps = new CommonSteps(page);
   959 |   // Step 1: Navigate to Base URL and log in
   960 |   await commonSteps.navigateToBaseUrl();
   961 |   await commonSteps.login();
   962 | //const title = await page.title()
   963 |   //Expects page to have a heading with the name of dashboard.
   964 | //expect(title).toBe('Dashboard - OpenSign™');
   965 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
   966 |  
   967 |   const fileChooserPromise = page.waitForEvent('filechooser');
   968 | await page.locator('input[type="file"]').click();
   969 | const fileChooser = await fileChooserPromise;
   970 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
   971 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
   972 | await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
   973 | await page.locator('input[name="Name"]').click();
   974 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
   975 | await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
   976 | await page.locator('input[name="Note"]').fill('Note Offer Letter for QA1144');
   977 | await page.getByRole('button', { name: 'Next' }).click();
   978 | await page.waitForLoadState("networkidle");
   979 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
   980 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
   981 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
   982 | await page.locator('//span[normalize-space()=\'signature\']').hover();
   983 | await page.mouse.down();
   984 | await page.mouse.move(600, 300)
   985 | await page.mouse.up();
   986 | try {
   987 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
   988 |
   989 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
   990 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
   991 |       
   992 |           console.log("signature widget dragged and dropped");
   993 |           break; // Exit the loop if successfully clicked
   994 |       } else {
   995 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
   996 |   
   997 |           await page.locator('//span[normalize-space()="signature"]').hover();
   998 |           await page.mouse.down();
   999 |           await page.mouse.move(800, 300);
  1000 |           await page.mouse.up();
  1001 |           
  1002 |           // Wait a bit before checking again
  1003 |           await page.waitForTimeout(1000);
  1004 |       }
  1005 |   
  1006 |       if (i === 5) {
  1007 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  1008 |       }
  1009 |   }
  1010 | } catch (error) {
  1011 |   console.log("Element not found or not interactable, continuing execution.");
  1012 |  
  1013 | }
  1014 | await page.getByRole('button', { name: 'Next' }).click();
  1015 | //await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
  1016 | await page.getByRole('button', { name: 'Send' }).click();
  1017 | await expect(page.locator('//h3[text()=\'Mails Sent\']')).toContainText('Mails Sent');
  1018 | await expect(page.locator('#selectSignerModal canvas')).toBeVisible();
> 1019 | await expect(page.locator('#selectSignerModal')).toContainText('Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoShare your review');
       |                                                  ^ Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)
  1020 | await page.getByRole('button', { name: 'No' }).click();
  1021 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
  1022 | // Wait up to 90 seconds for the text to appear
  1023 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  1024 | await page.locator('//div[@data-tut="tourreport2"]//i[@class="fa-light fa-ellipsis-vertical fa-lg"]').first().click();
  1025 | await page.locator('//span[contains(text(),"Revoke")]').click();
  1026 | await expect(page.getByRole('heading')).toContainText('Revoke document');
  1027 |   await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to revoke this document?');
  1028 |   await page.getByPlaceholder('Reason (optional)').fill('Invalid document');
  1029 |   await page.getByRole('button', { name: 'Yes' }).click();
  1030 |   await expect(page.locator('#renderList')).toContainText('Record revoked successfully!');
  1031 |   try {
  1032 |     await expect(page.locator('tbody')).toContainText('Offer Letter for QA1144');
  1033 | } catch (error) {
  1034 |     console.log("Document not found in the table, successfully deleted!");
  1035 | }
  1036 | });
  1037 | test('Verify that pagination is functioning correctly in the dashboard Recently sent for signatures.', async ({ page }) => {
  1038 |   const commonSteps = new CommonSteps(page);
  1039 |   // Step 1: Navigate to Base URL and log in
  1040 |   await commonSteps.navigateToBaseUrl();
  1041 |   await commonSteps.login();
  1042 |   // Wait up to 90 seconds for the text to appear
  1043 |   await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  1044 |   // Now assert the text
  1045 |   await expect(page.locator('#renderList')).toContainText('Recently sent for signatures');
  1046 |   //Check if Pagination Buttons Exist
  1047 |   const isPaginationVisible = await page.locator('//div[@data-tut="tourreport2"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').isVisible();
  1048 |   //expect(isPaginationVisible).toBeTruthy();
  1049 |   const isPaginationVisiblePrev = await page.locator('//div[@data-tut="tourreport2"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').isVisible();
  1050 |   //expect(isPaginationVisiblePrev).toBeTruthy();
  1051 |   const page1Data = await page.locator('//div[@data-tut="tourreport2"]//table[1]//tbody//tr').allTextContents();
  1052 |   await page.locator('//div[@data-tut="tourreport2"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').click();
  1053 |   await page.waitForLoadState('domcontentloaded');
  1054 |   //const firstPageContent = await page.locator('//button[@class=\'op-btn-active op-join-item op-btn op-btn-sm\' and text()=\'2\']').first().textContent(); // Capture first item
  1055 | const page2Data = await page.locator('//div[@data-tut="tourreport2"]//table[1]//tbody//tr').allTextContents();
  1056 | expect(page2Data).not.toEqual(page1Data);// Ensure content changes
  1057 | //Verify 'Previous' and 'Next' Buttons Work
  1058 | await page.locator('//div[@data-tut="tourreport2"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').click();
  1059 | await page.waitForLoadState('domcontentloaded');
  1060 | const page1DataPrev = await page.locator('//div[@data-tut="tourreport2"]//table[1]//tbody//tr').allTextContents();
  1061 | expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  1062 |
  1063 | });
```