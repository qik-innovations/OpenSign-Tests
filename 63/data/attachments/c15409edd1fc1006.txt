# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Inprogress report >> Verify that owner can create the document and sign it from the in-progress report.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/ReportInprogrees.spec.js:6:1

# Error details

```
Error: locator.click: Test timeout of 120000ms exceeded.
Call log:
  - waiting for locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium" and text()="signature"]')
    - locator resolved to <div class="font-medium">signature</div>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <div class="op-navbar bg-base-100 shadow">…</div> from <div class="sticky top-0 z-[501]">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <rect x="0" y="0" width="1280" height="720" fill="currentColor" pointer-events="auto" clip-path="url(#clip-path)"></rect> from <div id="___reactour">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting 20ms
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <rect x="0" y="0" width="1280" height="720" fill="currentColor" pointer-events="auto" clip-path="url(#clip-path)"></rect> from <div id="___reactour">…</div> subtree intercepts pointer events
  2 × retrying click action
      - waiting 100ms
      - waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <div class="flex-1 ml-2">…</div> from <div class="sticky top-0 z-[501]">…</div> subtree intercepts pointer events
  50 × retrying click action
       - waiting 500ms
       - waiting for element to be visible, enabled and stable
       - element is visible, enabled and stable
       - scrolling into view if needed
       - done scrolling
       - <rect x="0" y="0" width="1280" height="720" fill="currentColor" pointer-events="auto" clip-path="url(#clip-path)"></rect> from <div id="___reactour">…</div> subtree intercepts pointer events
     - retrying click action
       - waiting 500ms
       - waiting for element to be visible, enabled and stable
       - element is visible, enabled and stable
       - scrolling into view if needed
       - done scrolling
       - <rect x="0" y="0" width="1280" height="720" fill="currentColor" pointer-events="auto" clip-path="url(#clip-path)"></rect> from <div id="___reactour">…</div> subtree intercepts pointer events
     - retrying click action
       - waiting 500ms
       - waiting for element to be visible, enabled and stable
       - element is visible, enabled and stable
       - scrolling into view if needed
       - done scrolling
       - <div class="flex-1 ml-2">…</div> from <div class="sticky top-0 z-[501]">…</div> subtree intercepts pointer events
     - retrying click action
       - waiting 500ms
       - waiting for element to be visible, enabled and stable
       - element is visible, enabled and stable
       - scrolling into view if needed
       - done scrolling
       - <div class="flex-1 ml-2">…</div> from <div class="sticky top-0 z-[501]">…</div> subtree intercepts pointer events
  2 × retrying click action
      - waiting 500ms
      - waiting for element to be visible, enabled and stable
      - element is visible, enabled and stable
      - scrolling into view if needed
      - done scrolling
      - <rect x="0" y="0" width="1280" height="720" fill="currentColor" pointer-events="auto" clip-path="url(#clip-path)"></rect> from <div id="___reactour">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting 500ms
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <div class="flex-1 ml-2">…</div> from <div class="sticky top-0 z-[501]">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting 500ms

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/ReportInprogrees.spec.js:129:190
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: TEAM
- button ""
- img "img"
- button "Pravin Testing account"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages   
- button [disabled]
- text: 1 of 1
- button [disabled]
- button "Decline"
- button "Download"
- button "Finish"
- text: signature stamp initials
- textbox "name": Pravin Testing account
- textbox "job title": Quality analystAA
- textbox "company": OpenSign pvt ltd
- text: 04/14/2025 
- textbox "text"
- checkbox "option-1"
- text: option-1
- checkbox "option-2"
- text: option-2
- combobox:
  - option "option-1"
  - option "option-2"
- radio "option-1"
- text: option-1
- radio "option-2"
- text: option-2 image
- textbox "email": pravin+testaccount@nxglabs.in
- text: Yet to sign P Pravin Testing account pravin+testaccount@nxglabs.in
- paragraph: Signature
- tablist:
  - tab "My signature"
  - tab "My initials"
- img "signature"
- button "Auto sign all"
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.17.0 )"
- img
- dialog:
  - paragraph: Please complete the fields on page number 1, all highlighted in the same color for easy identification.
  - checkbox "Don't show this again"
  - text: Don't show this again 1
  - button [disabled]:
    - img
  - navigation:
    - button [disabled]
    - button
    - button
    - button
    - button
  - button:
    - img
  - button "Close"
```

# Test source

```ts
   29 |   await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
   30 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
   31 | await page.locator('//span[normalize-space()=\'signature\']').hover();
   32 | await page.mouse.down();
   33 | await page.mouse.move(600, 300)
   34 | await page.mouse.up();
   35 | try {
   36 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
   37 |
   38 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
   39 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
   40 |       
   41 |           console.log("signature widget dragged and dropped");
   42 |           break; // Exit the loop if successfully clicked
   43 |       } else {
   44 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
   45 |   
   46 |           await page.locator('//span[normalize-space()="signature"]').hover();
   47 |           await page.mouse.down();
   48 |           await page.mouse.move(800, 300);
   49 |           await page.mouse.up();
   50 |           // Wait a bit before checking again
   51 |           await page.waitForTimeout(1000);
   52 |       }
   53 |   
   54 |       if (i === 5) {
   55 |           console.log("signature widget did not become visible on the document after multiple attempts.");
   56 |       }
   57 |   }
   58 | } catch (error) {
   59 |   console.log("Element not found or not interactable, continuing execution.");
   60 |  
   61 | }
   62 | await page.locator('//span[normalize-space()=\'stamp\']').hover();
   63 | await page.mouse.down();
   64 | await page.mouse.move(600, 360)
   65 | await page.mouse.up();
   66 | await page.locator('//span[normalize-space()=\'initials\']').hover();
   67 | await page.mouse.down();
   68 | await page.mouse.move(600, 420)
   69 | await page.mouse.up();
   70 | await page.locator('//span[normalize-space()=\'name\']').hover();
   71 | await page.mouse.down();
   72 | await page.mouse.move(600, 470)
   73 | await page.mouse.up();
   74 | await page.locator('//span[normalize-space()=\'job title\']').hover();
   75 | await page.mouse.down();
   76 | await page.mouse.move(600, 500)
   77 | await page.mouse.up();
   78 | await page.locator('//span[normalize-space()=\'company\']').hover();
   79 | await page.mouse.down();
   80 | await page.mouse.move(600, 520)
   81 | await page.mouse.up();
   82 | await page.locator('//span[normalize-space()=\'date\']').hover();
   83 | await page.mouse.down();
   84 | await page.mouse.move(600, 550)
   85 | await page.mouse.up();
   86 | await page.locator('//span[normalize-space()=\'text input\']').hover();
   87 | await page.mouse.down();
   88 | await page.mouse.move(600, 570)
   89 | await page.mouse.up();
   90 | await page.locator('//span[normalize-space()=\'checkbox\']').hover();
   91 | await page.mouse.down();
   92 | await page.mouse.move(600, 600)
   93 | await page.mouse.up();
   94 | page.locator("//button[@type='submit' and text()='Save']").click();
   95 | await page.locator('span').filter({ hasText: 'dropdown' }).hover();
   96 | await page.mouse.down();
   97 | await page.mouse.move(800, 300)
   98 | await page.mouse.up();
   99 | page.locator("//button[@type='submit' and text()='Save']").click();
  100 | await page.locator('//span[normalize-space()=\'radio button\']').hover();
  101 | await page.mouse.down();
  102 | await page.mouse.move(800, 350)
  103 | await page.mouse.up();
  104 | page.locator("//button[@type='submit' and text()='Save']").click();
  105 | await page.locator('//span[normalize-space()=\'image\']').hover();
  106 | await page.mouse.down();
  107 | await page.mouse.move(800, 400)
  108 | await page.mouse.up();
  109 | await page.locator('//span[normalize-space()=\'email\']').hover();
  110 | await page.mouse.down();
  111 | await page.mouse.move(800, 400)
  112 | await page.mouse.up();
  113 | await page.getByRole('button', { name: 'Next' }).click();
  114 | //await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
  115 | await page.getByRole('button', { name: 'Send' }).click();
  116 | await expect(page.locator('//h3[text()=\'Mails Sent\']')).toContainText('Mails Sent');
  117 | await expect(page.locator('#selectSignerModal canvas')).toBeVisible();
  118 | await expect(page.locator('#selectSignerModal')).toContainText('Mails Sent✕Subsequent signers will get email(s) once you signs the document.Do you want to sign the document right now?YesNoHow was your experience with OpenSign™?😡0-3😐4-6😊7-8😍9-10Submit');
  119 |   await page.getByRole('button', { name: 'No' }).click();
  120 |  // Wait up to 90 seconds for the text to appear
  121 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  122 | // Now assert the text
  123 | await expect(page.locator('#renderList')).toContainText('In-progress documents');
  124 |   await page.locator('//div[@role = \'button\' and @class=\'op-btn-secondary op-btn op-btn-sm mr-1\']').first().click();
  125 |   await page.locator('//input[@type="checkbox" and @data-tut="IsAgree"]').click();
  126 |   await page.getByRole('button', { name: 'Agree & Continue' }).click();
  127 |   await page.waitForLoadState("networkidle");
  128 |   await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
> 129 |   await page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium" and text()="signature"]').click();
      |                                                                                                                                                                                              ^ Error: locator.click: Test timeout of 120000ms exceeded.
  130 |   await page.mouse.down();
  131 |   await page.mouse.move(120, 122)
  132 |   await page.mouse.up();
  133 |   // Optionally save changes
  134 | await page.locator("//button[normalize-space()='Save']").click();
  135 | await page.getByText('stamp').click();
  136 | const fileChooserPromise1 = page.waitForEvent('filechooser');
  137 | await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  138 | const fileChooser1 = await fileChooserPromise1;
  139 | await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  140 | await page.locator("//button[normalize-space()='Save']").click();
  141 | await page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium text-center" and text()="initials"]').click();
  142 | await page.mouse.move(650, 350)
  143 | await page.mouse.down();
  144 | await page.mouse.move(700, 380)
  145 | await page.mouse.up();
  146 | await page.locator("//button[normalize-space()='Save']").click();
  147 | /*await page.getByPlaceholder('Pravin Testing account').fill('Mark Anderson');
  148 |   await page.getByPlaceholder('Quality analystAA').fill('Quality analyst');
  149 |   await page.getByPlaceholder('OpenSign pvt ltd').fill('Oepnsign labs pvt. ltd');*/
  150 |   await page.getByPlaceholder('text').fill('120 wood street sanfransisco');
  151 |   await page.locator('#myDropdown').selectOption('option-2');
  152 |  await page.getByRole('radio', { name: 'option-1' }).check();
  153 |   await page.getByRole('checkbox', { name: 'option-1' }).check();
  154 |   await page.getByText('image').click();
  155 |   const fileChooserPromise2 = page.waitForEvent('filechooser');
  156 |   await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  157 |   const fileChooser2 = await fileChooserPromise2;
  158 |   await fileChooser2.setFiles(path.join(__dirname, '../TestData/Images/DesignerImage.png'));
  159 |   await page.locator("//button[normalize-space()='Save']").click();
  160 |   await page.getByRole('button', { name: 'Finish' }).click();
  161 |   /*await expect(page.locator('#selectSignerModal')).toContainText('Congratulations! 🎉 This document has been successfully signed by all participants!',{ timeout: 90000 });
  162 |   await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Print' })).toBeVisible();
  163 |   await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Certificate' })).toBeVisible();
  164 |   await expect(page.locator('#selectSignerModal').getByRole('button', { name: 'Download' })).toBeVisible();
  165 |   await page.getByRole('button', { name: '✕' }).click();*/
  166 | });
  167 |
  168 | test('Verify the column names and the document details on the inprogress report.', async ({ page }) => {
  169 |   const commonSteps = new CommonSteps(page);
  170 |   // Step 1: Navigate to Base URL and log in
  171 |   await commonSteps.navigateToBaseUrl();
  172 |   await commonSteps.login();
  173 | //const title = await page.title()
  174 |   //Expects page to have a heading with the name of dashboard.
  175 | //expect(title).toBe('Dashboard - OpenSign™');
  176 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  177 |   await page.locator('input[name="Name"]').click();
  178 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  179 |   await page.locator('input[name="Note"]').click();
  180 |   const fileChooserPromise = page.waitForEvent('filechooser');
  181 | await page.locator('input[type="file"]').click();
  182 | const fileChooser = await fileChooserPromise;
  183 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  184 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  185 | await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
  186 | await page.locator('input[name="Name"]').click();
  187 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  188 | await page.getByRole('button', { name: 'Next' }).click();
  189 | await page.waitForLoadState("networkidle");
  190 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  191 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  192 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  193 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  194 | await page.mouse.down();
  195 | await page.mouse.move(600, 300)
  196 | await page.mouse.up();
  197 | try {
  198 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  199 |
  200 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  201 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  202 |       
  203 |           console.log("signature widget dragged and dropped");
  204 |           break; // Exit the loop if successfully clicked
  205 |       } else {
  206 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  207 |   
  208 |           await page.locator('//span[normalize-space()="signature"]').hover();
  209 |           await page.mouse.down();
  210 |           await page.mouse.move(800, 300);
  211 |           await page.mouse.up();
  212 |           
  213 |           // Wait a bit before checking again
  214 |           await page.waitForTimeout(1000);
  215 |       }
  216 |   
  217 |       if (i === 5) {
  218 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  219 |       }
  220 |   }
  221 | } catch (error) {
  222 |   console.log("Element not found or not interactable, continuing execution.");
  223 |  
  224 | }
  225 | await page.locator('//span[normalize-space()=\'stamp\']').hover();
  226 | await page.mouse.down();
  227 | await page.mouse.move(600, 360)
  228 | await page.mouse.up();
  229 | await page.locator('//span[normalize-space()=\'initials\']').hover();
```