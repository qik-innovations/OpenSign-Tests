# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that a user can create a document with two signers, send it for a signature request, and signer can successfully sign the document.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Request_Signature.spec.js:639:1

# Error details

```
Error: locator.click: Test timeout of 120000ms exceeded.
Call log:
  - waiting for locator('//button[normalize-space()=\'Save\']')
    - locator resolved to <button disabled type="button" class="pointer-events-none op-btn op-btn-primary shadow-lg">Save</button>
  - attempting click action
    2 × waiting for element to be visible, enabled and stable
      - element is not stable
    - retrying click action
    - waiting 20ms
    2 × waiting for element to be visible, enabled and stable
      - element is not stable
    - retrying click action
      - waiting 100ms
    198 × waiting for element to be visible, enabled and stable
        - element is not enabled
      - retrying click action
        - waiting 500ms

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Request_Signature.spec.js:964:59
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: TEAM
- button ""
- img "img"
- button "Pravin Testing account"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text: Pages
- button "+ Add pages"
- text: +     
- dialog:
  - heading "Send Mail" [level=3]
  - button "✕"
  - text: Are you sure you want to send out this document for signatures?
  - button "Send"
  - text: Cutomize email OR andyamaya@nxglabs.in
  - button " Copy link"
  - text:  pravin+travis@nxglabs.in
  - button " Copy link"
  - text: 
- button
- text: 2 of 3
- button
- button "Back"
- button "Next" [disabled]
- text: Recipients A Andy amaya andyamaya@nxglabs.in 
- separator
- text: T Travis Mathew pravin+travis@nxglabs.in 
- separator
- button "+ Add recipients"
- text: Fields  signature   stamp   initials   name   job title   company   date   text   text input   checkbox   dropdown   radio button   image   email 
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.12.0 )"
```

# Test source

```ts
   864 | });
   865 | await page.locator('//span[normalize-space()=\'job title\']').hover();
   866 | await page.mouse.down();
   867 | await page.mouse.move(600, 500)
   868 | await page.mouse.up();
   869 | //here we are copying the widget id to use while signing teh document through the guest signatrue flow
   870 | const Signer1VariablejobtitleID = await page.evaluate(() => {
   871 |   const element = document.evaluate(
   872 |       "//div[span[text()='job title']]/ancestor::div[contains(@class, 'signYourselfBlock')]",document, null,
   873 |       XPathResult.FIRST_ORDERED_NODE_TYPE,
   874 |       null
   875 |   ).singleNodeValue;
   876 |   
   877 |   return element ? element.id : null;
   878 | });
   879 | await page.locator('//span[normalize-space()=\'company\']').hover();
   880 | await page.mouse.down();
   881 | await page.mouse.move(600, 520)
   882 | await page.mouse.up();
   883 | //here we are copying the widget id to use while signing teh document through the guest signatrue flow
   884 | const Signer1VariablecompanyID = await page.evaluate(() => {
   885 |   const element = document.evaluate(
   886 |       "//div[span[text()='company']]/ancestor::div[contains(@class, 'signYourselfBlock')]",document, null,
   887 |       XPathResult.FIRST_ORDERED_NODE_TYPE,
   888 |       null
   889 |   ).singleNodeValue;
   890 |   
   891 |   return element ? element.id : null;
   892 | });
   893 | await page.locator('//span[normalize-space()=\'date\']').hover();
   894 | await page.mouse.down();
   895 | await page.mouse.move(600, 550)
   896 | await page.mouse.up();
   897 | await page.locator('//span[normalize-space()=\'text input\']').hover();
   898 | await page.mouse.down();
   899 | await page.mouse.move(600, 570)
   900 | await page.mouse.up();
   901 | //here we are copying the widget id to use while signing teh document through the guest signatrue flow
   902 | const Signer1VariabletextinputID = await page.evaluate(() => {
   903 |   const element = document.evaluate(
   904 |       "//div[span[text()='text input']]/ancestor::div[contains(@class, 'signYourselfBlock')]",document, null,
   905 |       XPathResult.FIRST_ORDERED_NODE_TYPE,
   906 |       null
   907 |   ).singleNodeValue;
   908 |   
   909 |   return element ? element.id : null;
   910 | });
   911 | await page.locator('//span[normalize-space()=\'checkbox\']').hover();
   912 | await page.mouse.down();
   913 | await page.mouse.move(600, 600)
   914 | await page.mouse.up();
   915 | page.locator("//button[@type='submit' and text()='Save']").click();
   916 | await page.locator('span').filter({ hasText: 'dropdown' }).hover();
   917 | await page.mouse.down();
   918 | await page.mouse.move(800, 300)
   919 | await page.mouse.up();
   920 | page.locator("//button[@type='submit' and text()='Save']").click();
   921 | await page.locator('//span[normalize-space()=\'radio button\']').hover();
   922 | await page.mouse.down();
   923 | await page.mouse.move(800, 400)
   924 | await page.mouse.up();
   925 | page.locator("//button[@type='submit' and text()='Save']").click();
   926 | await page.locator('//span[normalize-space()=\'image\']').hover();
   927 | await page.mouse.down();
   928 | await page.mouse.move(800, 500)
   929 | await page.mouse.up();
   930 | await page.locator('//span[normalize-space()=\'email\']').hover();
   931 | await page.mouse.down();
   932 | await page.mouse.move(800, 470)
   933 | await page.mouse.up();
   934 | //here we are copying the widget id to use while signing teh document through the guest signatrue flow
   935 | const Signer1VariableemailID = await page.evaluate(() => {
   936 |   const element = document.evaluate(
   937 |       "//div[span[text()='email']]/ancestor::div[contains(@class, 'signYourselfBlock')]",document, null,
   938 |       XPathResult.FIRST_ORDERED_NODE_TYPE,
   939 |       null
   940 |   ).singleNodeValue;
   941 |   
   942 |   return element ? element.id : null;
   943 | });
   944 | await page.getByRole('button', { name: 'Next' }).click();
   945 | await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
   946 | //await page.locator('//span[@class=" hidden md:block ml-1 " and text()="Copy link"]').click();
   947 | await page.locator('div').filter({ hasText: /^andyamaya@nxglabs\.inCopy link$/ }).getByRole('button').click();
   948 | const copiedUrl1 = await page.locator('//p[@id="copyUrl"]').evaluate(el => el.textContent.trim());
   949 | //await page.locator('//span[@class=" hidden md:block ml-1 " and text()="Copy link"]').click();
   950 | await page.locator('div').filter({ hasText: /^pravin\+travis@nxglabs\.inCopy link$/ }).getByRole('button').click();
   951 | const copiedUrl2 = await page.locator('//p[@id="copyUrl"]').evaluate(el => el.textContent.trim());
   952 | const page1 = await page.context().newPage();
   953 | await page1.goto(copiedUrl1);
   954 | await page1.locator('//input[@type="checkbox" and @data-tut="IsAgree"]').click();
   955 | await page1.getByRole('button', { name: 'Agree & Continue' }).click();
   956 | await page1.waitForLoadState("networkidle");
   957 | await page1.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
   958 | await page1.locator('//div[@id="container"]//div[text()="signature"]').click();
   959 | await page1.mouse.down();
   960 | await page1.mouse.move(150, 128)
   961 | await page1.mouse.move(160, 138)
   962 | await page1.mouse.up();
   963 | // Optionally save changes
>  964 | await page1.locator("//button[normalize-space()='Save']").click();
       |                                                           ^ Error: locator.click: Test timeout of 120000ms exceeded.
   965 | await page1.locator('//div[@id="container"]//div[text()="stamp"]').click();
   966 | const fileChooserPromise1 = page1.waitForEvent('filechooser');
   967 | await page1.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
   968 | const fileChooser1 = await fileChooserPromise1;
   969 | await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
   970 | await page1.locator("//button[normalize-space()='Save']").click();
   971 | await page1.locator('//div[@id="container"]//div[text()="initials"]').click();
   972 | await page1.mouse.move(650, 350)
   973 | await page1.mouse.down();
   974 | await page1.mouse.move(700, 380)
   975 | await page1.mouse.up();
   976 | await page1.locator("//button[normalize-space()='Save']").click();
   977 | await page1.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${VariablenameID}']//textarea[1]`).fill('Mark Anderson');
   978 | await page1.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${VariablejobtitleID}']//textarea[1]`).fill('Quality analyst');
   979 | await page1.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${VariablecompanyID}']//textarea[1]`).fill('OpenSign pvt. ltd');
   980 | await page1.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${VariabletextinputID}']//textarea[1]`).fill('120 wood street sanfransisco');
   981 | await page1.locator('#myDropdown').selectOption('option-2');
   982 | await page1.getByRole('radio', { name: 'option-1' }).check();
   983 | await page1.getByRole('checkbox', { name: 'option-1' }).check();
   984 | await page1.locator('//div[contains(text(),"image")]').click();
   985 | const fileChooserPromise2 = page1.waitForEvent('filechooser');
   986 | await page1.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
   987 | const fileChooser2 = await fileChooserPromise2;
   988 | await fileChooser2.setFiles(path.join(__dirname, '../TestData/Images/DesignerImage.png'));
   989 | await page1.locator("//button[normalize-space()='Save']").click();
   990 | await page1.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${VariableemailID}']//textarea[1]`).fill('anderson@oepnsignlabs.com');
   991 | await page1.getByRole('button', { name: 'Finish' }).click();
   992 | await page1.getByText('Congratulations! 🎉 This').click();
   993 | const page2 = await page.context().newPage();
   994 | await page2.goto(copiedUrl2);
   995 | await page2.waitForLoadState("networkidle");
   996 | await page2.locator('//input[@type="checkbox" and @data-tut="IsAgree"]').click();
   997 | await page2.getByRole('button', { name: 'Agree & Continue' }).click();
   998 | await expect(page2.getByRole('paragraph')).toContainText('List of signers who have already signed the document .');
   999 | await page2.locator('.sc-gsFSXq > button:nth-child(3)').click();
  1000 | //await expect(page2.getByRole('paragraph')).toContainText('Click any of the placeholders appearing on the document to sign. You will then see options to draw your signature, type it, or upload an image .');
  1001 | //await page2.locator('.sc-gsFSXq > button:nth-child(3)').click();
  1002 | //await expect(page2.getByRole('paragraph')).toContainText('Click Decline, or Finish buttons to navigate your document. Use the ellipsis menu for additional options, including the Download button .');
  1003 | await page2.getByRole('button', { name: 'Close' }).click();
  1004 | await page2.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  1005 | await page2.locator('//div[@id="container"]//div[text()="signature"]').click();
  1006 | await page2.mouse.down();
  1007 | await page2.mouse.move(150, 128)
  1008 | await page2.mouse.move(160, 138)
  1009 | await page2.mouse.up();
  1010 | // Optionally save changes
  1011 | await page2.locator("//button[normalize-space()='Save']").click();
  1012 | await page2.locator('//div[@id="container"]//div[text()="stamp"]').click();
  1013 | const fileChooserPromise3 = page2.waitForEvent('filechooser');
  1014 | await page2.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  1015 | const fileChooser3 = await fileChooserPromise3;
  1016 | await fileChooser3.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  1017 | await page2.locator("//button[normalize-space()='Save']").click();
  1018 | await page2.locator('//div[@id="container"]//div[text()="initials"]').click();
  1019 | await page2.mouse.move(650, 350)
  1020 | await page2.mouse.down();
  1021 | await page2.mouse.move(700, 380)
  1022 | await page2.mouse.up();
  1023 | await page2.locator("//button[normalize-space()='Save']").click();
  1024 | await page2.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${Signer1VariablenameID}']//textarea[1]`).fill('Mark Anderson');
  1025 | await page2.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${Signer1VariablejobtitleID}']//textarea[1]`).fill('Quality analyst');
  1026 | await page2.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${Signer1VariablecompanyID}']//textarea[1]`).fill('OpenSign pvt. ltd');
  1027 | await page2.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${Signer1VariabletextinputID}']//textarea[1]`).fill('120 wood street sanfransisco');
  1028 | await page2.locator('#myDropdown').selectOption('option-2');
  1029 | await page2.getByRole('radio', { name: 'option-1' }).check();
  1030 | await page2.getByRole('checkbox', { name: 'option-1' }).check();
  1031 | await page2.locator('//div[contains(text(),"image")]').click();
  1032 | const fileChooserPromise4 = page2.waitForEvent('filechooser');
  1033 | await page2.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  1034 | const fileChooser4 = await fileChooserPromise4;
  1035 | await fileChooser4.setFiles(path.join(__dirname, '../TestData/Images/DesignerImage.png'));
  1036 | await page2.locator("//button[normalize-space()='Save']").click();
  1037 | await page2.locator(`//div[@class="signYourselfBlock react-draggable" and @id='${Signer1VariableemailID}']//textarea[1]`).fill('anderson@opepnsignlabs.com');
  1038 | await page2.getByRole('button', { name: 'Finish' }).click();
  1039 | await expect(page2.getByRole('paragraph')).toContainText('Congratulations! 🎉 This document has been successfully signed by all participants!',{ timeout: 180000 });
  1040 |
  1041 | });
  1042 | test('Verify that a new free user cannot access the paid features on the request signature page.', async ({ page }) => {
  1043 |   const commonSteps = new CommonSteps(page);
  1044 |     // Step 1: Navigate to Base UR
  1045 |     // L and log in
  1046 |     await commonSteps.navigateToBaseUrl();
  1047 |     await commonSteps.NewUserlogin();
  1048 |   //const title = await page.title()
  1049 |     //Expects page to have a heading with the name of dashboard.
  1050 |   //expect(title).toBe('Dashboard - OpenSign™');
  1051 |   
  1052 |   await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  1053 |     await page.locator('input[name="Name"]').click();
  1054 |     await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  1055 |     await page.locator('input[name="Note"]').click();
  1056 |     const fileChooserPromise = page.waitForEvent('filechooser');
  1057 |   await page.locator('input[type="file"]').click();
  1058 |   const fileChooser = await fileChooserPromise;
  1059 |   await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  1060 |   await page.locator('.text-xs > div > .cursor-pointer').first().click();
  1061 |   await page.getByLabel('Add yourself').check();
  1062 |   await page.getByRole('button', { name: 'Submit' }).click();
  1063 |   await page.getByText('Advanced options').click();
  1064 |   const checkbox = page.locator('//input[@type="checkbox" and @class="op-toggle transition-all checked:[--tglbg:#3368ff] checked:bg-white"]');
```