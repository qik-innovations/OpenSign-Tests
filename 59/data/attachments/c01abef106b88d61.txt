# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that an existing Team Plan user can create a template using all advanced fields in the Create New Template form.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/CreateTemplate.spec.js:360:1

# Error details

```
Error: locator.check: Clicking the checkbox did not change its state
Call log:
  - waiting for locator('input[name="IsEnableOTP"]').first()
    - locator resolved to <input type="radio" value="true" name="IsEnableOTP" class="op-radio op-radio-xs"/>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - performing click action
    - click action done
    - waiting for scheduled navigations to finish
    - navigations have finished

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/CreateTemplate.spec.js:379:59
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: TEAM
- button ""
- img "img"
- button "Pravin Testing account"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menu "Templates submenu":
        - menuitem "Create template"
        - menuitem "Manage templates"
        - menuitem "Embedding"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- heading "New template" [level=1]
- text: "Use this form to create reusable templates for your documents. File (pdf, png, jpg, jpeg, docx)* file selected: UmvW1PeSXMM7AI1d.pdf "
- button ""
- text: Template title*
- textbox: Sample-joining-letter
- text: Description
- textbox
- text: Note*
- textbox: Please review and sign this document
- text: Document flow setting Send in order
- superscript: "?"
- radio [checked]
- text: "Yes"
- radio
- text: No Auto reminder
- checkbox [checked]
- text: Remind once in every (Days)*
- spinbutton: "5"
- text: Time to complete (Days)*
- spinbutton: "2"
- text: Bcc
- superscript: "?"
- log
- text: Pravin Testing account
- button "Remove Pravin Testing account"
- combobox
- text: + Security settings Enable OTP verification
- superscript: "?"
- radio
- text: "Yes"
- radio [checked]
- text: No Enable tour
- superscript: "?"
- radio [checked]
- text: "Yes"
- radio
- text: No Notify on signatures
- superscript: "?"
- radio [checked]
- text: "Yes"
- radio
- text: No Allow modifications
- superscript: "?"
- radio
- text: "Yes"
- radio [checked]
- text: No Redirect url
- textbox
- text: Hide advanced options
- button "Next"
- text: Cancel
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.12.0 )"
- button ""
```

# Test source

```ts
  279 | await page.mouse.up()
  280 | try {
  281 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  282 |
  283 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  284 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  285 |       
  286 |           console.log("signature widget dragged and dropped");
  287 |           break; // Exit the loop if successfully clicked
  288 |       } else {
  289 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  290 |   
  291 |           await page.locator('//span[normalize-space()="signature"]').hover();
  292 |           await page.mouse.down();
  293 |           await page.mouse.move(800, 300);
  294 |           await page.mouse.up();
  295 |           
  296 |           // Wait a bit before checking again
  297 |           await page.waitForTimeout(1000);
  298 |       }
  299 |   
  300 |       if (i === 5) {
  301 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  302 |       }
  303 |   }
  304 | } catch (error) {
  305 |   console.log("Element not found or not interactable, continuing execution.");
  306 |  
  307 | }
  308 | await page.getByRole('button', { name: '+ Add role' }).click();
  309 | await page.getByPlaceholder('User').fill('Manager');
  310 | await page.locator('//button[@type="submit" and @class="op-btn op-btn-primary" and text()="Add"]').click();
  311 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  312 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  313 |  await page.waitForLoadState("networkidle");
  314 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  315 | await page.waitForLoadState("networkidle");
  316 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  317 | await page.mouse.down();
  318 | await page.mouse.move(600, 300)
  319 | await page.mouse.up()
  320 | try {
  321 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  322 |
  323 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  324 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  325 |       
  326 |           console.log("signature widget dragged and dropped");
  327 |           break; // Exit the loop if successfully clicked
  328 |       } else {
  329 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  330 |   
  331 |           await page.locator('//span[normalize-space()="signature"]').hover();
  332 |           await page.mouse.down();
  333 |           await page.mouse.move(800, 300);
  334 |           await page.mouse.up();
  335 |           
  336 |           // Wait a bit before checking again
  337 |           await page.waitForTimeout(1000);
  338 |       }
  339 |   
  340 |       if (i === 5) {
  341 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  342 |       }
  343 |   }
  344 | } catch (error) {
  345 |   console.log("Element not found or not interactable, continuing execution.");
  346 |  
  347 | }
  348 | await page.getByRole('button', { name: 'Next' }).click();
  349 |   await page.getByRole('button', { name: 'Bulk send' }).click();
  350 |   await page.locator('#selectSignerModal div').filter({ hasText: /^HR$/ }).getByPlaceholder('Enter Email...').click();
  351 |   await page.locator('#selectSignerModal div').filter({ hasText: /^HR$/ }).getByPlaceholder('Enter Email...').fill('pravin+677@nxglabs.in');
  352 |   await page.locator('#selectSignerModal div').filter({ hasText: /^Manager$/ }).getByPlaceholder('Enter Email...').click();
  353 |   await page.locator('#selectSignerModal div').filter({ hasText: /^Manager$/ }).getByPlaceholder('Enter Email...').fill('pravin+689@nxglabs.in');
  354 |   await page.getByRole('button', { name: ' Send' }).click();
  355 |   await expect(page.locator('#selectSignerModal')).toContainText('Please upgrade to Professional or Team plan to use bulk send.');
  356 |   await expect(page.locator('#selectSignerModal')).toContainText('Upgrade now');
  357 |   await page.locator('#selectSignerModal').getByRole('button', { name: 'Upgrade now' }).click();
  358 | });
  359 |
  360 | test('Verify that an existing Team Plan user can create a template using all advanced fields in the Create New Template form.', async ({ page }) => {
  361 |   const commonSteps = new CommonSteps(page);
  362 |     // Step 1: Navigate to Base URL and log in
  363 |     await commonSteps.navigateToBaseUrl();
  364 |     await commonSteps.login();
  365 |     
  366 |   await page.locator('//span[@class="ml-3 lg:ml-4" and text()="Templates"]').click();
  367 |   await page.getByRole('menuitem', { name: 'Create template' }).click();
  368 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA11');
  369 |   const fileChooserPromise = page.waitForEvent('filechooser');
  370 |   await page.locator('input[type="file"]').click();
  371 |   const fileChooser = await fileChooserPromise;
  372 |   await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  373 |   await page.getByText('Advanced options').click();
  374 |   await page.locator('input[name="SendinOrder"]').nth(1).check();
  375 |   await page.getByLabel('', { exact: true }).check();
  376 |   await page.locator('input[name="TimeToCompleteDays"]').fill('2');
  377 |   await page.locator('.css-n9qnu9').click();
  378 |   await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
> 379 |   await page.locator('input[name="IsEnableOTP"]').first().check();
      |                                                           ^ Error: locator.check: Clicking the checkbox did not change its state
  380 |   await page.locator('input[name="IsTourEnabled"]').nth(1).check();
  381 |   await page.locator('div').filter({ hasText: /^Notify on signaturesYesNo$/ }).getByRole('radio').nth(1).check();
  382 |   await page.locator('div:nth-child(5) > div > div > .mr-\\[2px\\]').first().check();
  383 |   
  384 |   await page.locator('input[name="RedirectUrl"]').fill('https://staging-app.opensignlabs.com/');
  385 |   await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); 
  386 |   await page.getByRole('button', { name: 'Next' }).click();
  387 |   await page.getByRole('button', { name: '', exact: true }).click();
  388 |   await expect(page.locator('input[name="Name"]')).toHaveValue('Sample-joining-letter');
  389 |   await expect(page.getByLabel('Note')).toHaveValue('Please review and sign this document');
  390 |   await expect(page.locator('input[name="SendinOrder"]').nth(1)).toBeChecked();
  391 |   await expect(page.getByLabel('', { exact: true })).toBeChecked();
  392 |   await expect(page.locator('input[name="IsEnableOTP"]').first()).toBeChecked();
  393 |   await expect(page.locator('input[name="IsTourEnabled"]').first()).not.toBeChecked();
  394 |   await expect(page.locator('input[name="IsTourEnabled"]').nth(1)).toBeChecked();
  395 |   await page.locator('div').filter({ hasText: /^Notify on signatures YesNo$/ }).getByRole('radio').nth(1).check();
  396 |   await expect(page.locator('input[name="RedirectUrl"]')).toHaveValue('https://staging-app.opensignlabs.com/');
  397 |   await expect(page.locator('input[name="TimeToCompleteDays"]')).toHaveValue('2');
  398 |   await page.getByRole('button', { name: 'Submit' }).click();
  399 |   await page.getByRole('button', { name: '+ Add role' }).click();
  400 |   await page.getByPlaceholder('User').fill('HR');
  401 |   await page.locator('//button[@type="submit" and @class="op-btn op-btn-primary" and text()="Add"]').click();
  402 |   await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  403 |   await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  404 |    await page.waitForLoadState("networkidle");
  405 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  406 | await page.waitForLoadState("networkidle");
  407 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  408 | await page.mouse.down();
  409 | await page.mouse.move(600, 300)
  410 | await page.mouse.up();
  411 | try {
  412 |   const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  413 |
  414 |   for (let i = 0; i < 5; i++) { // Retry up to 5 times
  415 |       if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  416 |       
  417 |           console.log("signature widget dragged and dropped");
  418 |           break; // Exit the loop if successfully clicked
  419 |       } else {
  420 |           console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  421 |   
  422 |           await page.locator('//span[normalize-space()="signature"]').hover();
  423 |           await page.mouse.down();
  424 |           await page.mouse.move(800, 300);
  425 |           await page.mouse.up();
  426 |           
  427 |           // Wait a bit before checking again
  428 |           await page.waitForTimeout(1000);
  429 |       }
  430 |   
  431 |       if (i === 5) {
  432 |           console.log("signature widget did not become visible on the document after multiple attempts.");
  433 |       }
  434 |   }
  435 | } catch (error) {
  436 |   console.log("Element not found or not interactable, continuing execution.");
  437 |  
  438 | }
  439 | await page.waitForLoadState("networkidle");
  440 | await page.getByRole('button', { name: 'Next' }).click();
  441 | await page.getByRole('button', { name: '✕' }).click();
  442 |   await expect(page.locator('tbody')).toContainText('Sample-joining-letter');
  443 |   await expect(page.locator('tbody')).toContainText('Download');
  444 |   await expect(page.locator('tbody')).toContainText('Pravin Testing account');
  445 |   await page.getByRole('button', { name: 'View' }).first().click();
  446 |   await expect(page.locator('#selectSignerModal')).toContainText('Roles');
  447 |   await expect(page.locator('#selectSignerModal')).toContainText('Email');
  448 |   await page.getByRole('button', { name: '✕' }).click();
  449 |
  450 | });
  451 |
  452 | test('Verify that a Team Plan user can create a template, make it public, and sign the document through the public template.', async ({ page }) => {
  453 |   const commonSteps = new CommonSteps(page);
  454 |     // Step 1: Navigate to Base URL and log in
  455 |     await commonSteps.navigateToBaseUrl();
  456 |     await commonSteps.login();
  457 |     
  458 |   await page.locator('//span[@class="ml-3 lg:ml-4" and text()="Templates"]').click();
  459 |   await page.getByRole('menuitem', { name: 'Create template' }).click();
  460 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA11');
  461 |   const fileChooserPromise = page.waitForEvent('filechooser');
  462 |   await page.locator('input[type="file"]').click();
  463 |   const fileChooser = await fileChooserPromise;
  464 |   await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  465 |   await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); 
  466 |   await page.getByRole('button', { name: 'Next' }).click();
  467 |   await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  468 |   await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  469 |    await page.waitForLoadState("networkidle");
  470 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  471 | await page.waitForLoadState("networkidle");
  472 |   await page.getByRole('button', { name: '+ Add role' }).click();
  473 |   await page.getByPlaceholder('User').fill('HR');
  474 |   await page.locator('//button[@type="submit" and @class="op-btn op-btn-primary" and text()="Add"]').click();
  475 |   await page.locator('//span[normalize-space()=\'signature\']').hover();
  476 |   await page.mouse.down();
  477 |   await page.mouse.move(600, 300)
  478 |   await page.mouse.up();
  479 |   try {
```