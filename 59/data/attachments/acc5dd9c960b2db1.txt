# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that pagination is functioning correctly in the dashboard drafts document.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:369:1

# Error details

```
Error: expect(received).not.toEqual(expected) // deep equality

Expected: not ["Sample Test Doc LinePlease review and sign this documentOpenSign™ DriveDownloadPravin Testing accountView", "Sample Test Doc LinePlease review and sign this documentOpenSign™ DriveDownloadPravin Testing accountView", "Sample Test Doc LinePlease review and sign this documentOpenSign™ DriveDownloadPravin Testing accountView", "Sample Test Doc LinePlease review and sign this documentOpenSign™ DriveDownloadPravin Testing accountView", "Sample Test Doc LinePlease review and sign this documentOpenSign™ DriveDownloadPravin Testing accountView"]

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Dashboard.spec.js:388:25
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: TEAM
- button ""
- img "img"
- button "Pravin Testing account"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Pravin Testing account
  - paragraph: OpenSign pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- text:  Sign yourself Use this option to sign the document yourself without adding others  Request signatures Use this option to request signatures from others and yourself together.  Need your signature 56
- superscript: "?"
- text:  Out for signatures 176
- superscript: "?"
- text: Recent signature requests
- table:
  - rowgroup:
    - row "Title File Owner Signers Action":
      - cell "Title"
      - cell "File"
      - cell "Owner"
      - cell "Signers"
      - cell "Action"
  - rowgroup:
    - row "Sample-joining-letter Expires 04-Apr-2025 Download Pravin Testing account View  sign":
      - cell "Sample-joining-letter Expires 04-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " sign":
        - button " sign"
    - row "Sample-joining-letter Expires 02-Apr-2025 Download Pravin Testing account View  sign":
      - cell "Sample-joining-letter Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " sign":
        - button " sign"
    - row "Sample-joining-letter Expires 02-Apr-2025 Download Pravin Testing account View  sign":
      - cell "Sample-joining-letter Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " sign":
        - button " sign"
    - row "Sample-joining-letter Expires 02-Apr-2025 Download Pravin Testing account View  sign":
      - cell "Sample-joining-letter Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " sign":
        - button " sign"
    - row "Sample-joining-letter Expires 02-Apr-2025 Download Pravin Testing account View  sign":
      - cell "Sample-joining-letter Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " sign":
        - button " sign"
- button "Prev"
- button "1"
- button "2"
- button "3"
- button "..." [disabled]
- button "12"
- button "Next"
- text: Recently sent for signatures
- table:
  - rowgroup:
    - row "Title File Owner Signers Action":
      - cell "Title"
      - cell "File"
      - cell "Owner"
      - cell "Signers"
      - cell "Action"
  - rowgroup:
    - row "Sample-joining-letter Expires 04-Apr-2025 Download Pravin Testing account View   ":
      - cell "Sample-joining-letter Expires 04-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell "  ":
        - button ""
        - button ""
        - button ""
    - row "Sample-joining-letter Expires 04-Apr-2025 Download Pravin Testing account View   ":
      - cell "Sample-joining-letter Expires 04-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell "  ":
        - button ""
        - button ""
        - button ""
    - row "Sample-joining-letter Expires 04-Apr-2025 Download Pravin Testing account View   ":
      - cell "Sample-joining-letter Expires 04-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell "  ":
        - button ""
        - button ""
        - button ""
    - row "Sample Test Doc Line Expires 02-Apr-2025 Download Pravin Testing account View   ":
      - cell "Sample Test Doc Line Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell "  ":
        - button ""
        - button ""
        - button ""
    - row "Sample Test Doc Line Expires 02-Apr-2025 Download Pravin Testing account View   ":
      - cell "Sample Test Doc Line Expires 02-Apr-2025"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell "  ":
        - button ""
        - button ""
        - button ""
- button "Prev"
- button "1"
- button "2"
- button "3"
- button "4"
- button "Next"
- text: Drafts
- table:
  - rowgroup:
    - row "Title Note Folder File Owner Signers Action":
      - cell "Title"
      - cell "Note"
      - cell "Folder"
      - cell "File"
      - cell "Owner"
      - cell "Signers"
      - cell "Action"
  - rowgroup:
    - row "Sample Test Doc Line Please review and sign this document OpenSign™ Drive Download Pravin Testing account View  ":
      - cell "Sample Test Doc Line"
      - cell "Please review and sign this document":
        - paragraph: Please review and sign this document
      - cell "OpenSign™ Drive"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " ":
        - button ""
        - button ""
    - row "Sample Test Doc Line Please review and sign this document OpenSign™ Drive Download Pravin Testing account View  ":
      - cell "Sample Test Doc Line"
      - cell "Please review and sign this document":
        - paragraph: Please review and sign this document
      - cell "OpenSign™ Drive"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " ":
        - button ""
        - button ""
    - row "Sample Test Doc Line Please review and sign this document OpenSign™ Drive Download Pravin Testing account View  ":
      - cell "Sample Test Doc Line"
      - cell "Please review and sign this document":
        - paragraph: Please review and sign this document
      - cell "OpenSign™ Drive"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " ":
        - button ""
        - button ""
    - row "Sample Test Doc Line Please review and sign this document OpenSign™ Drive Download Pravin Testing account View  ":
      - cell "Sample Test Doc Line"
      - cell "Please review and sign this document":
        - paragraph: Please review and sign this document
      - cell "OpenSign™ Drive"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " ":
        - button ""
        - button ""
    - row "Sample Test Doc Line Please review and sign this document OpenSign™ Drive Download Pravin Testing account View  ":
      - cell "Sample Test Doc Line"
      - cell "Please review and sign this document":
        - paragraph: Please review and sign this document
      - cell "OpenSign™ Drive"
      - cell "Download":
        - button "Download"
      - cell "Pravin Testing account"
      - cell "View":
        - button "View"
      - cell " ":
        - button ""
        - button ""
- button "Prev"
- button "1"
- button "2"
- button "3"
- button "4"
- button "Next"
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.12.0 )"
- button ""
```

# Test source

```ts
  288 | } catch (error) {
  289 | console.log("Element not found or not interactable, continuing execution.");
  290 |
  291 | }
  292 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
  293 | // Wait up to 90 seconds for the text to appear
  294 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  295 | // Now assert the text
  296 | await expect(page.locator('//div[@data-tut="tourreport3"]//div[text()="Drafts"]')).toBeVisible({ timeout: 12000 });
  297 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[1]')).toContainText('Title');
  298 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[2]')).toContainText('Note');
  299 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[3]')).toContainText('Folder');
  300 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[4]')).toContainText('File');
  301 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[5]')).toContainText('Owner');
  302 | await expect(page.locator('//div[@data-tut="tourreport3"]//th[6]')).toContainText('Signers');
  303 | await expect(page.locator('//div[@data-tut="tourreport3"]//div[@class="font-semibold"]').first()).toContainText('Draft doc rpt Sample offer letter');
  304 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[2]').first()).toContainText('Note Draft doc rpt');
  305 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[3]').first()).toContainText('OpenSign™ Drive'); 
  306 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[4]').first()).toContainText('Download');
  307 | await expect(page.locator('//div[@data-tut="tourreport3"]//td[5]').first()).toContainText('Pravin Testing account');  
  308 | await page.locator('//div[@data-tut="tourreport3"]//div[@role="button"and @title="Edit"]').first().click();
  309 | await page.waitForSelector('#container > .react-pdf__Document', { timeout: 90000 }); 
  310 | await page.waitForLoadState("networkidle");
  311 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  312 | await page.waitForLoadState("networkidle");
  313 | await page.locator('//span[normalize-space()="signature"]').hover();
  314 | await page.mouse.down();
  315 | await page.mouse.move(600, 300)
  316 | await page.mouse.up();
  317 | try {
  318 | const rowLocator = page.locator("//button[@type='button' and text()='Save']/parent::div");
  319 |
  320 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  321 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  322 |         await rowLocator.click();
  323 |         console.log("Save button clicked!");
  324 |         break; // Exit the loop if successfully clicked
  325 |     } else {
  326 |         console.log(`Attempt ${i + 1}: Save button not visible, performing actions...`);
  327 |
  328 |         await page.locator('//span[normalize-space()="signature"]').hover();
  329 |         await page.mouse.down();
  330 |         await page.mouse.move(800, 300);
  331 |         await page.mouse.up();
  332 |         
  333 |         // Wait a bit before checking again
  334 |         await page.waitForTimeout(1000);
  335 |     }
  336 |
  337 |     if (i === 5) {
  338 |         console.log("Save button did not become visible after multiple attempts.");
  339 |     }
  340 | }
  341 | } catch (error) {
  342 | console.log("Element not found or not interactable, continuing execution.");
  343 |
  344 | }
  345 | await page.locator('//span[normalize-space()="stamp"]').hover();
  346 | await page.mouse.down();
  347 | await page.mouse.move(600, 360)
  348 | await page.mouse.up();
  349 | const fileChooserPromise1 = page.waitForEvent('filechooser');
  350 | await page.locator('//i[@class=\'fa-light fa-cloud-upload-alt uploadImgLogo\']').click();
  351 | const fileChooser1 = await fileChooserPromise1;
  352 | await fileChooser1.setFiles(path.join(__dirname, '../TestData/Images/stamp.jpg'));
  353 | await page.locator("//button[normalize-space()='Save']").click();
  354 | await page.locator('//span[normalize-space()="initials"]').hover();
  355 | await page.mouse.down();
  356 | await page.mouse.move(600, 420)
  357 | await page.mouse.up();
  358 | await page.locator("//button[normalize-space()='Save']").click();
  359 | await page.locator('//span[normalize-space()="date"]').hover();
  360 | await page.mouse.down();
  361 | await page.mouse.move(600, 550)
  362 | await page.mouse.up();
  363 | await page.locator("//button[normalize-space()='Finish']").click();
  364 | await page.getByText('Successfully signed!').waitFor({ timeout: 90000 });
  365 |  await page.locator("//input[@placeholder='Add an email address and hit enter']").fill('pravin@Nxglabs.in');
  366 |  await page.locator("//i[@class='fa-light fa-plus']").first().click();
  367 |  await page.locator("//button[normalize-space()='Send']").click();
  368 | });
  369 | test('Verify that pagination is functioning correctly in the dashboard drafts document.', async ({ page }) => {
  370 |     const commonSteps = new CommonSteps(page);
  371 |     // Step 1: Navigate to Base URL and log in
  372 |     await commonSteps.navigateToBaseUrl();
  373 |     await commonSteps.login();
  374 |     // Wait up to 90 seconds for the text to appear
  375 |     await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  376 |     // Now assert the text
  377 |     await expect(page.locator('#renderList')).toContainText('Drafts');
  378 |     //Check if Pagination Buttons Exist
  379 |     const isPaginationVisible = await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').isVisible();
  380 |     //expect(isPaginationVisible).toBeTruthy();
  381 |     const isPaginationVisiblePrev = await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').isVisible();
  382 |     //expect(isPaginationVisiblePrev).toBeTruthy();
  383 |     const page1Data = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  384 |     await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Next"]').click();
  385 |     await page.waitForLoadState('domcontentloaded');
  386 |     //const firstPageContent = await page.locator('//button[@class=\'op-btn-active op-join-item op-btn op-btn-sm\' and text()=\'2\']').first().textContent(); // Capture first item
  387 |   const page2Data = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
> 388 |   expect(page2Data).not.toEqual(page1Data);// Ensure content changes
      |                         ^ Error: expect(received).not.toEqual(expected) // deep equality
  389 |   //Verify 'Previous' and 'Next' Buttons Work
  390 |   await page.locator('//div[@data-tut="tourreport3"]//button[@class="op-join-item op-btn op-btn-sm" and text()="Prev"]').click();
  391 |   await page.waitForLoadState('domcontentloaded');
  392 |   const page1DataPrev = await page.locator('//div[@data-tut="tourreport3"]//table[1]//tbody//tr').allTextContents();
  393 |   expect(page2Data).not.toEqual(page1DataPrev);// Ensure content changes
  394 |   
  395 |   });
  396 |
  397 | test('Verify that owner can create the document and sign it from the dashboard recent signature requests.', async ({ page }) => {
  398 |   const commonSteps = new CommonSteps(page);
  399 |   // Step 1: Navigate to Base URL and log in
  400 |   await commonSteps.navigateToBaseUrl();
  401 |   await commonSteps.login();
  402 | //const title = await page.title()
  403 |   //Expects page to have a heading with the name of dashboard.
  404 | //expect(title).toBe('Dashboard - OpenSign™');
  405 | await page.getByRole('menuitem', { name: 'Request signatures' }).click();
  406 |   await page.locator('input[name="Name"]').click();
  407 |   await page.locator('input[name="Name"]').fill('Offer Letter for QA1144');
  408 |   await page.locator('input[name="Note"]').click();
  409 |   const fileChooserPromise = page.waitForEvent('filechooser');
  410 | await page.locator('input[type="file"]').click();
  411 | const fileChooser = await fileChooserPromise;
  412 | await fileChooser.setFiles(path.join(__dirname, '../TestData/Samplepdfs/Sample-Joining-Letter.pdf'));
  413 | await page.locator('div').filter({ hasText: /^Signers\*Select\.\.\.$/ }).locator('svg').click();
  414 | await page.getByRole('option', { name: 'Pravin Testing account<pravin' }).click();
  415 | await expect(page.getByRole('button', { name: 'Next' })).toBeEnabled({ timeout: 90000 }); // Wait up to 90s
  416 | await page.getByRole('button', { name: 'Next' }).click();
  417 | await page.waitForLoadState("networkidle");
  418 | await page.waitForSelector('//div[@class=\'react-pdf__Document\']', { timeout: 90000 }); 
  419 | await page.locator('//span[normalize-space()="signature"]').waitFor({ state: 'visible', timeout: 90000 });
  420 | await expect(page.locator('//span[normalize-space()=\'signature\']')).toBeVisible();
  421 | await page.locator('//span[normalize-space()=\'signature\']').hover();
  422 | await page.mouse.down();
  423 | await page.mouse.move(600, 300)
  424 | await page.mouse.up();
  425 | try {
  426 | const rowLocator = page.locator('//div[@class="select-none-cls overflow-hidden w-full h-full text-black flex flex-col justify-center items-center"]//div[@class="font-medium"and text()="signature"]');
  427 |
  428 | for (let i = 0; i < 5; i++) { // Retry up to 5 times
  429 |     if (await rowLocator.isVisible() && await rowLocator.isEnabled()) {
  430 |     
  431 |         console.log("signature widget dragged and dropped");
  432 |         break; // Exit the loop if successfully clicked
  433 |     } else {
  434 |         console.log(`Attempt ${i + 1}: signature widget not visible on the document, performing actions...`);
  435 |
  436 |         await page.locator('//span[normalize-space()="signature"]').hover();
  437 |         await page.mouse.down();
  438 |         await page.mouse.move(800, 300);
  439 |         await page.mouse.up();
  440 |         
  441 |         // Wait a bit before checking again
  442 |         await page.waitForTimeout(1000);
  443 |     }
  444 |
  445 |     if (i === 5) {
  446 |         console.log("signature widget did not become visible on the document after multiple attempts.");
  447 |     }
  448 | }
  449 | } catch (error) {
  450 | console.log("Element not found or not interactable, continuing execution.");
  451 |
  452 | }
  453 | await page.locator('//span[normalize-space()=\'stamp\']').hover();
  454 | await page.mouse.down();
  455 | await page.mouse.move(600, 360)
  456 | await page.mouse.up();
  457 | await page.locator('//span[normalize-space()=\'initials\']').hover();
  458 | await page.mouse.down();
  459 | await page.mouse.move(600, 420)
  460 | await page.mouse.up();
  461 | await page.locator('//span[normalize-space()=\'name\']').hover();
  462 | await page.mouse.down();
  463 | await page.mouse.move(600, 470)
  464 | await page.mouse.up();
  465 | await page.getByRole('button', { name: 'Next' }).click();
  466 | //await expect(page.locator('#selectSignerModal')).toContainText('Are you sure you want to send out this document for signatures?');
  467 | await page.getByRole('button', { name: 'Send' }).click();
  468 | await expect(page.locator('//h3[text()=\'Mails Sent\']')).toContainText('Mails Sent');
  469 | await expect(page.locator('#selectSignerModal canvas')).toBeVisible();
  470 | await expect(page.locator('#selectSignerModal')).toContainText('You have successfully sent email to Pravin Testing account. Subsequent signers will get email(s) once Pravin Testing account signs the document');
  471 | await page.getByRole('button', { name: 'No' }).click();
  472 | await page.getByRole('menuitem', { name: 'Dashboard' }).click();
  473 | // Wait up to 90 seconds for the text to appear
  474 |
  475 | await page.locator('#renderList').waitFor({ state: 'visible', timeout: 90000 });
  476 | // Now assert the text
  477 | await expect(page.locator('//div[@data-tut="tourreport1"]//div[text()="Recent signature requests"]')).toBeVisible({ timeout: 12000 });
  478 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[1]')).toContainText('Title');
  479 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[2]')).toContainText('File');
  480 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[3]')).toContainText('Owner');
  481 | await expect(page.locator('//div[@data-tut="tourreport1"]//th[4]')).toContainText('Signers');
  482 | await expect(page.locator('//div[@data-tut="tourreport1"]//div[@class="font-semibold"]').first()).toContainText('Sample-joining-letter');
  483 | await expect(page.locator('//div[@data-tut="tourreport1"]//td[2]').first()).toContainText('Download');
  484 | await expect(page.locator('//div[@data-tut="tourreport1"]//td[3]').first()).toContainText('Pravin Testing account');  
  485 | await page.locator('//div[@data-tut="tourreport1"]//div[@role="button"and @title="SIGN"]').first().click();
  486 | // Now assert the text
  487 | await page.locator('//input[@type="checkbox" and @data-tut="IsAgree"]').click();
  488 | await page.getByRole('button', { name: 'Agree & Continue' }).click();
```