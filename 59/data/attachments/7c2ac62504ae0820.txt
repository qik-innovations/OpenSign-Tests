# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: SignupPage >> Verify that a user can sign up with a professional plan and validate the details in the user profile.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Signup.spec.js:160:1

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)

Locator: getByRole('list')
Expected string: "pravin+p4wdj0@nxglabs.in"
Received string: "Name: Mathew W KarlPhone: 8806607524Email : pravin+0.7813241001903293@nxglabs.inCompany: OpenSign pvt. ltdJob title: Quality AnalystIs email verified: Not verified(verify)Public profile : staging.opensign.me/pravin49cc46 Tagline  : Seal the deal openlyDisable documentId : Upgrade nowLanguage: selectEnglishEspañolaFrançaisItalianoDeutsch"
Call log:
  - expect.toContainText with timeout 5000ms
  - waiting for getByRole('list')
    9 × locator resolved to <ul class="w-full flex flex-col p-2 text-sm">…</ul>
      - unexpected value "Name: Mathew W KarlPhone: 8806607524Email : pravin+0.7813241001903293@nxglabs.inCompany: OpenSign pvt. ltdJob title: Quality AnalystIs email verified: Not verified(verify)Public profile : staging.opensign.me/pravin49cc46 Tagline  : Seal the deal openlyDisable documentId : Upgrade nowLanguage: selectEnglishEspañolaFrançaisItalianoDeutsch"

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Signup.spec.js:250:40
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- text: PRO
- button ""
- img "img"
- button "Mathew Wade"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Mathew Wade
  - paragraph: qikAi pvt ltd
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- img "dp"
- text: Admin
- list:
  - listitem: "Name: Mathew W Karl"
  - listitem: "Phone: 8806607524"
  - listitem: "Email : pravin+0.7813241001903293@nxglabs.in"
  - listitem: "Company: OpenSign pvt. ltd"
  - listitem: "Job title: Quality Analyst"
  - listitem: "Is email verified: Not verified(verify)"
  - listitem:
    - text: "Public profile :"
    - button "?":
      - superscript: "?"
    - text: staging.opensign.me/pravin49cc46
    - button ""
    - button ""
  - listitem:
    - text: "Tagline :"
    - button "?":
      - superscript: "?"
    - text: Seal the deal openly
  - listitem:
    - text: "Disable documentId :"
    - button "?":
      - superscript: "?"
    - superscript: Upgrade now
    - checkbox [disabled]
  - listitem:
    - text: "Language:"
    - combobox:
      - option "select" [disabled]
      - option "English" [selected]
      - option "Española"
      - option "Français"
      - option "Italiano"
      - option "Deutsch"
- button "Edit"
- button "Change password"
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.12.0 )"
- button ""
```

# Test source

```ts
  150 |     await page.waitForTimeout(500); // Small delay before retrying (adjust if needed)
  151 | }
  152 | // Click the target locator after it's found
  153 | await page.locator('//span[text()="Sent this month"]').click();
  154 |   await expect(page.locator('#selectSignerModal')).toContainText('To maintain service quality and prevent spam, OpenSign allows up to 15 emails per month on the free plan. Upgrade now for unlimited email sending.');
  155 |   await expect(page.locator('#selectSignerModal')).toContainText('Tip: You can still sign unlimited documents by manually sharing the signing request link.Learn how.');
  156 |   await expect(page.locator('#selectSignerModal')).toContainText('Upgrade now');
  157 |   await page.locator('div').filter({ hasText: /^✕$/ }).click();
  158 | });
  159 |
  160 | test('Verify that a user can sign up with a professional plan and validate the details in the user profile.', async ({ page }) => {
  161 |   const commonSteps = new CommonSteps(page);
  162 |   // Step 1: Navigate to Base URL and log in
  163 |   await commonSteps.navigateToBaseUrl();
  164 |   await page.getByRole('button', { name: 'Create account' }).click();
  165 |   await expect(page.getByRole('heading', { name: 'Create account' })).toBeVisible();
  166 |   const email = `pravin+${Math.random()}@nxglabs.in`;
  167 |   await fillSignupForm(page, {
  168 |     name: 'Mathew Wade',
  169 |     email,
  170 |     phone: '8238988998',
  171 |     company: 'qikAi pvt ltd',
  172 |     jobTitle: 'Hr Execative',
  173 |     password: 'Nxglabs@123',
  174 |   });
  175 |
  176 |   await page.locator(locators.registerButton).click();
  177 |   await expect(page.getByRole('heading', { name: 'OPENSIGN™ PROFESSIONAL' })).toBeVisible();
  178 |  await expect(page.locator('#root')).toContainText('$9.99/monthBilled YearlyExclusive Access to advanced features.');
  179 |   await expect(page.locator('#root')).toContainText('Everything in OpenSign™ freeField validationsRegular expression validationsOrganize docs in OpenSign™ DriveWebhooksZapier integrationAPI Accessupto 240 API signaturesCustom email templatesConnect your own Gmail or SMTP account for sending emailsAuto remindersBulk send (upto 240 docs)Premium Public profile usernamesEnforce email-based verification to confirm signer identityEmbedded signing');
  180 |   
  181 |   await page.locator(locators.professionalPlanButton).click();
  182 |   await page.locator(locators.proceedButton).click();
  183 |   await page.locator(locators.proceedButton).click();
  184 |   // Fill address details
  185 |   await page.getByLabel('Address', { exact: true }).fill('120 wood street');
  186 |   await page.getByLabel('City').fill('San Francisco');
  187 |   await page.getByLabel('ZIP Code').fill('34554');
  188 |   await page.getByRole('button', { name: 'Review Order' }).click();
  189 |   await page.getByRole('button', { name: 'Proceed' }).click();
  190 |   const allFrames = page.frames();
  191 |   console.log(`Total iframes found: ${allFrames.length}`);
  192 | // Locate the iframe and switch to its content
  193 | // Switch to the iframe by index number (e.g., the second iframe)
  194 | const index = 3; // Change this to the desired index
  195 | const iframe = allFrames[index];
  196 | await iframe.click('//input[@name=\'cardnumber\']');
  197 | await iframe.fill('//input[@name=\'cardnumber\']', '4242424242424242'); 
  198 | const indexExpDateFrame = 4; 
  199 |   const iframesExpDate = allFrames[indexExpDateFrame];
  200 |   await iframesExpDate.click('//input[@name=\'exp-date\']');
  201 |   await iframesExpDate.fill('//input[@name=\'exp-date\']', '0728'); 
  202 |
  203 |   const indexcvvFrame= 5;
  204 |   const iframecvvFrame = allFrames[indexcvvFrame];
  205 |   await iframecvvFrame.click('//input[@name=\'cvc\']');
  206 |   await iframecvvFrame.fill('//input[@name=\'cvc\']', '709'); 
  207 |   await page.getByRole('button', { name: 'Pay $' }).click();
  208 |   test.setTimeout(280 * 1000);
  209 |
  210 |  await page.getByLabel('Close').click();
  211 |  await page.locator('//div[@id=\'profile-menu\']//parent::div[text()=\'PRO\']').isVisible();
  212 |  await page.getByRole('button', { name: '' }).click();
  213 |   await page.getByText('Profile').click();
  214 |   await page.getByLabel('Close').click();
  215 |  
  216 | //here we are verifing the admin user details under profile section
  217 | await expect(page.locator('#renderList')).toContainText('Admin');
  218 | await expect(page.getByRole('list')).toContainText('Name:');
  219 | await expect(page.getByRole('list')).toContainText('Mathew Wade');
  220 | await expect(page.getByRole('list')).toContainText('Phone:');
  221 | await expect(page.getByRole('list')).toContainText('8238988998');
  222 | await expect(page.getByRole('list')).toContainText('Email :');
  223 | await expect(page.getByRole('list')).toContainText(email);
  224 | await expect(page.getByRole('list')).toContainText('Company:');
  225 | await expect(page.getByRole('list')).toContainText('qikAi pvt ltd');
  226 | await expect(page.getByRole('list')).toContainText('Job title:');
  227 | await expect(page.getByRole('list')).toContainText('Hr Execative');
  228 | await expect(page.getByRole('list')).toContainText('Is email verified:');
  229 | await expect(page.getByRole('list')).toContainText('Not verified(verify)');
  230 | await expect(page.getByRole('list')).toContainText('Public profile :');
  231 | await expect(page.getByRole('list')).toContainText('Tagline :');
  232 | await expect(page.getByRole('list')).toContainText('Disable documentId :');
  233 | await expect(page.getByRole('list')).toContainText('Upgrade now');
  234 | await expect(page.getByRole('list')).toContainText('Language:');
  235 | await page.getByRole('button', { name: 'Edit' }).click();
  236 |   await page.locator('li').filter({ hasText: 'Name:' }).getByRole('textbox').fill('Mathew W Karl');
  237 |   await page.locator('li').filter({ hasText: 'Phone:' }).getByRole('textbox').fill('8806607524');
  238 |   await page.locator('li').filter({ hasText: 'Company:' }).getByRole('textbox').fill('OpenSign pvt. ltd');
  239 |   await page.locator('li').filter({ hasText: 'Job title:' }).getByRole('textbox').fill('Quality Analyst');
  240 |   const PropubprofUsername = `pravin${Math.random().toString(16).substring(2, 8)}`;
  241 |   await page.getByPlaceholder('enter user name').fill(PropubprofUsername);
  242 |   await page.getByPlaceholder('enter tagline').fill('Seal the deal openly');
  243 |   await page.getByRole('button', { name: 'Save' }).click();
  244 |   await expect(page.locator('#renderList')).toContainText('Admin');
  245 |   await expect(page.getByRole('list')).toContainText('Name:');
  246 |   await expect(page.getByRole('list')).toContainText('Mathew W Karl');
  247 |   await expect(page.getByRole('list')).toContainText('Phone:');
  248 |   await expect(page.getByRole('list')).toContainText('8806607524');
  249 |   await expect(page.getByRole('list')).toContainText('Email :');
> 250 |   await expect(page.getByRole('list')).toContainText(loginCredentials.FreeplanUsername);
      |                                        ^ Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)
  251 |   await expect(page.getByRole('list')).toContainText('Company:');
  252 |   await expect(page.getByRole('list')).toContainText('OpenSign pvt. ltd');
  253 |   await expect(page.getByRole('list')).toContainText('Job title:');
  254 |   await expect(page.getByRole('list')).toContainText('Quality Analyst');
  255 |   await expect(page.getByRole('list')).toContainText('Is email verified:');
  256 |   await expect(page.getByRole('list')).toContainText('Not verified(verify)');
  257 |   await expect(page.getByRole('list')).toContainText('Public profile :');
  258 |   await expect(page.getByRole('list')).toContainText(PropubprofUsername);
  259 |   await expect(page.getByRole('list')).toContainText('Tagline :');
  260 |   await expect(page.getByRole('list')).toContainText('Seal the deal openly');
  261 |   await expect(page.getByRole('list')).toContainText('Disable documentId :');
  262 |   await expect(page.getByRole('list')).toContainText('Upgrade now');
  263 |   await expect(page.getByRole('list')).toContainText('Language:');
  264 |   await page.getByRole('button', { name: '' }).click();
  265 |   await page.getByText('Billing').click();
  266 |   await expect(page.getByRole('heading')).toContainText('pro-yearly');
  267 |   await expect(page.locator('#renderList')).toContainText('Billed Yearly');
  268 |   await expect(page.locator('#renderList')).toContainText('Exclusive Access to advanced features.');
  269 |   await expect(page.locator('#renderList')).toContainText('active');
  270 |  // Get date from the locator
  271 |  const text = await page.locator('//span[@class="op-text-primary font-medium"]').textContent();   
  272 |     if (!text) {
  273 |         throw new Error('No date text found in the locator');
  274 |     }
  275 |     // Parse text to a Date object (handle different date formats if necessary)
  276 |     let date = new Date(text.trim());
  277 |     if (isNaN(date.getTime())) {
  278 |         throw new Error(`Invalid date format: ${text}`);
  279 |     }
  280 |     // Format the date as YYYY-MM-DD
  281 |     let BillingformattedDate = date.toISOString().split('T')[0];
  282 |     console.log('Formatted Date:', BillingformattedDate);
  283 |     let currentDate = new Date();
  284 |   // Add one year
  285 |   let nextYearDate = new Date();
  286 |   nextYearDate.setFullYear(currentDate.getFullYear() + 1);
  287 |   // Format the date as YYYY-MM-DD (or any format you need)
  288 |   let formattedDate = nextYearDate.toISOString().split('T')[0];
  289 |   console.log('Date after one year:', formattedDate);
  290 |   expect(formattedDate).toBe(BillingformattedDate); 
  291 | });
  292 | test('Verify that a user can sign up with a Teams plan and validate the details in the user profile.', async ({ page }) => {
  293 |   const commonSteps = new CommonSteps(page);
  294 |   // Step 1: Navigate to Base URL and log in
  295 |   await commonSteps.navigateToBaseUrl();
  296 |   await page.getByRole('button', { name: 'Create account' }).click();
  297 |   await expect(page.getByRole('heading', { name: 'Create account' })).toBeVisible();
  298 |   const email = `pravin+${Math.random()}@nxglabs.in`;
  299 |   await fillSignupForm(page, {
  300 |     name: 'Mathew Wade',
  301 |     email,
  302 |     phone: '8238988998',
  303 |     company: 'qikAi pvt ltd',
  304 |     jobTitle: 'Hr Execative',
  305 |     password: 'Nxglabs@123',
  306 |   });
  307 |
  308 |   await page.locator(locators.registerButton).click();
  309 |   await expect(page.getByRole('heading', { name: 'OPENSIGN™ TEAMS' })).toBeVisible();
  310 |   await expect(page.locator('#root')).toContainText('$19.99/user/monthBilled YearlyExclusive Access to advanced features.');
  311 |   await expect(page.locator('#root')).toContainText('Everything in OpenSign™ professionalupto 500 API signaturesTeams and OrganizationsShare Templates with teamsShare Templates with individualsBYOC - Store your documents in your own cloud storageDocumentId removal from signed docsBulk send (upto 500 docs)Request Payments (coming soon)Mobile app (coming soon)');
  312 |   await page.locator(locators.TeamsPlanButton).click();
  313 |   await page.locator(locators.proceedButton).click();
  314 |   await page.locator(locators.proceedButton).click();
  315 |   // Fill address details
  316 |   await page.getByLabel('Address', { exact: true }).fill('120 wood street');
  317 |   await page.getByLabel('City').fill('San Francisco');
  318 |   await page.getByLabel('ZIP Code').fill('34554');
  319 |   await page.getByRole('button', { name: 'Review Order' }).click();
  320 |   await page.getByRole('button', { name: 'Proceed' }).click();
  321 |   const allFrames = page.frames();
  322 |   console.log(`Total iframes found: ${allFrames.length}`);
  323 | // Locate the iframe and switch to its content
  324 | // Switch to the iframe by index number (e.g., the second iframe)
  325 | const index = 3; // Change this to the desired index
  326 | const iframe = allFrames[index];
  327 | await iframe.click('//input[@name=\'cardnumber\']');
  328 | await iframe.fill('//input[@name=\'cardnumber\']', '4242424242424242'); 
  329 | const indexExpDateFrame = 4; 
  330 |   const iframesExpDate = allFrames[indexExpDateFrame];
  331 |   await iframesExpDate.click('//input[@name=\'exp-date\']');
  332 |   await iframesExpDate.fill('//input[@name=\'exp-date\']', '0728'); 
  333 |
  334 |   const indexcvvFrame= 5;
  335 |   const iframecvvFrame = allFrames[indexcvvFrame];
  336 |   await iframecvvFrame.click('//input[@name=\'cvc\']');
  337 |   await iframecvvFrame.fill('//input[@name=\'cvc\']', '709'); 
  338 |   await page.getByRole('button', { name: 'Pay Rs.100.00' }).click();
  339 |   test.setTimeout(280 * 1000);
  340 |
  341 |  await page.getByLabel('Close').click();
  342 |  await page.locator('//div[@id=\'profile-menu\']//parent::div[text()=\'PRO\']').isVisible();
  343 |  await page.getByRole('button', { name: '' }).click();
  344 |   await page.getByText('Profile').click();
  345 |   await page.getByLabel('Close').click();
  346 |  
  347 | //here we are verifing the admin user details under profile section
  348 | await expect(page.locator('#renderList')).toContainText('Admin');
  349 | await expect(page.getByRole('list')).toContainText('Name:');
  350 | await expect(page.getByRole('list')).toContainText('Mathew Wade');
```