# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Preferences >> Verify that New free user can save the general preferences.
- Location: /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Preferences.spec.js:6:1

# Error details

```
Error: expect.toBeVisible: Error: strict mode violation: getByText('default') resolved to 2 elements:
    1) <div title="Enabling this allow signers to default signature" class="text-[13px] font-medium hover:underline underline-offset-2 cursor-default capitalize">default</div> aka getByText('default', { exact: true })
    2) <label class="text-[14px] mb-[0.7rem] font-medium">Select default Date Format for Date widget:</label> aka getByText('Select default Date Format')

Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByText('default')

    at /home/runner/work/OpenSign-Tests/OpenSign-Tests/tests/MainAppPages/Preferences.spec.js:27:43
```

# Page snapshot

```yaml
- text: "New feature: Teams plan users can now integrate their own AWS S3 buckets for file storage — Setup now. "
- button ""
- img "logo"
- button "Upgrade now"
- button ""
- img "img"
- button "Mathew Wade"
- button ""
- complementary:
  - img "Profile"
  - paragraph: Mathew Wade
  - paragraph: qikAi.com
  - navigation "OpenSign Sidebar Navigation":
    - menubar "OpenSign Sidebar Navigation":
      - menuitem "Dashboard"
      - menuitem "Sign yourself"
      - menuitem "Request signatures"
      - button " Templates"
      - menuitem "OpenSign™ Drive"
      - button " Documents"
      - menuitem "Contactbook"
      - button " Settings"
      - menu "Settings submenu":
        - menuitem "My signature"
        - menuitem "API token"
        - menuitem "Webhook"
        - menuitem "Preferences"
        - menuitem "Teams"
        - menuitem "Users"
  - link "OpenSign's Github"
  - link "OpenSign's LinkedIn"
  - link "OpenSign's Twitter"
  - link "OpenSign's Discord"
- heading "OpenSign™ Preferences ?" [level=1]:
  - text: OpenSign™ Preferences
  - superscript: "?"
- tablist:
  - tab " General"
  - tab " Email"
- text: Allowed signature types
- superscript: "?"
- checkbox [checked]
- text: draw
- checkbox [checked]
- text: type
- checkbox [checked]
- text: upload
- checkbox [checked]
- text: default Notify on signatures
- superscript: "?"
- superscript: Upgrade now
- radio [checked]
- text: "Yes"
- radio
- text: "No"
- heading "Select your Timezone" [level=1]
- log
- text: Select...
- combobox
- strong: Thu, Mar 20, 2025, 08:45:02
- text: "Select default Date Format for Date widget:"
- combobox:
  - option "MM/DD/YYYY" [selected]
  - option "DD/MM/YYYY"
  - option "MMMM DD, YYYY"
  - option "DD MMMM, YYYY"
  - option "DD-MM-YYYY"
  - option "DD MMM, YYYY"
  - option "YYYY-MM-DD"
  - option "MM-DD-YYYY"
  - option "MM.DD.YYYY"
  - option "MMM DD, YYYY"
- paragraph:
  - strong: "Formatted Date: 03/20/2025"
- text: Send in order
- superscript: "?"
- radio [checked]
- text: "Yes"
- radio
- text: No Enable tour
- superscript: "?"
- radio [checked]
- text: "Yes"
- radio
- text: "No"
- button "Save"
- contentinfo:
  - complementary:
    - paragraph: "All rights reserved © 2025 OpenSign™ ( version: v2.12.0 )"
```

# Test source

```ts
   1 | const { loginCredentials } = require('../TestData/GlobalVar/global-setup');
   2 | const { test, expect } = require('@playwright/test');
   3 | const path = require('path');
   4 | const CommonSteps = require('../utils/CommonSteps');
   5 | test.describe('Preferences', () => {
   6 | test('Verify that New free user can save the general preferences.', async ({ page }) => {
   7 |     const commonSteps = new CommonSteps(page);
   8 |     // Step 1: Navigate to Base URL and log in
   9 |     await commonSteps.navigateToBaseUrl();
  10 |     await commonSteps.NewUserlogin();
  11 |     await page.getByRole('button', { name: ' Settings' }).click();
  12 |     await page.getByRole('menuitem', { name: 'Preferences' }).click();
  13 |     await page.waitForTimeout(5000);
  14 |     const title = await page.title();
  15 |     if (title === 'Preferences - OpenSign™') {
  16 |       console.log('Page title is correct: Preferences - OpenSign™');
  17 |     } else {
  18 |       console.error(`Page title is incorrect. Expected: "Preferences - OpenSign™", Got: "${title}"`);
  19 |     }
  20 |     await expect(page.getByRole('heading', { name: 'OpenSign™ Preferences ?' })).toBeVisible();
  21 |   await page.getByText('General').click();
  22 |   await expect(page.getByText('Allowed signature types')).toBeVisible();
  23 |   await page.getByText('draw').click();
  24 |   await expect(page.getByText('draw')).toBeVisible();
  25 |   await expect(page.getByText('type', { exact: true })).toBeVisible();
  26 |   await expect(page.getByText('upload')).toBeVisible();
> 27 |   await expect(page.getByText('default')).toBeVisible();
     |                                           ^ Error: expect.toBeVisible: Error: strict mode violation: getByText('default') resolved to 2 elements:
  28 |   await expect(page.getByText('Notify on signaturesUpgrade')).toBeVisible();
  29 |   await expect(page.locator('#renderList').getByText('Upgrade now')).toBeVisible();
  30 |   const page3Promise = page.waitForEvent('popup');
  31 |   await page.locator('#renderList').getByText('Upgrade now').click();
  32 |   const page3 = await page3Promise;
  33 |   await expect(page.getByRole('heading', { name: 'Select your Timezone' })).toBeVisible();
  34 |   await page.locator('svg').click();
  35 |   await page.locator('#renderList div').filter({ hasText: 'Allowed signature' }).nth(2).click();
  36 |   await page.locator('.css-n9qnu9').click();
  37 |   await page.locator('#renderList div').filter({ hasText: 'Allowed signature' }).nth(2).click();
  38 |   await page.locator('svg').click();
  39 |   await page.getByRole('option', { name: '(GMT-6:00) Saskatchewan' }).click();
  40 |   await page.getByRole('button', { name: 'Save' }).click();
  41 |   await page.getByText('Saved successfully.').click();
  42 |   await page.getByRole('button', { name: 'Save' }).click();
  43 |   await page.getByText('Saved successfully.').click();
  44 | });
  45 |
  46 | test('Verify that a new free user cannot save email preferences is prompted to upgrade', async ({ page }) => {
  47 |     const commonSteps = new CommonSteps(page);
  48 |     // Step 1: Navigate to Base URL and log in
  49 |     await commonSteps.navigateToBaseUrl();
  50 |     await commonSteps.NewUserlogin();
  51 |     await page.getByRole('button', { name: ' Settings' }).click();
  52 |     await page.getByRole('menuitem', { name: 'Preferences' }).click();
  53 |     await page.waitForTimeout(5000);
  54 |     const title = await page.title();
  55 |     if (title === 'Preferences - OpenSign™') {
  56 |       console.log('Page title is correct: Preferences - OpenSign™');
  57 |     } else {
  58 |       console.error(`Page title is incorrect. Expected: "Preferences - OpenSign™", Got: "${title}"`);
  59 |     }
  60 |     await expect(page.getByRole('heading', { name: 'OpenSign™ Preferences ?' })).toBeVisible();
  61 |   await page.getByText('Email').click();
  62 |   await page.getByRole('button', { name: 'Upgrade now' }).nth(1).click();
  63 | });});
  64 |
```